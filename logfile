2023-12-04 22:02:56.632 CET [20519] LOG:  starting PostgreSQL 14.10 (Homebrew) on x86_64-apple-darwin17.7.0, compiled by Apple LLVM version 10.0.0 (clang-1000.11.45.5), 64-bit
2023-12-04 22:02:56.633 CET [20519] LOG:  listening on IPv6 address "::1", port 5432
2023-12-04 22:02:56.633 CET [20519] LOG:  listening on IPv4 address "127.0.0.1", port 5432
2023-12-04 22:02:56.634 CET [20519] LOG:  listening on Unix socket "/tmp/.s.PGSQL.5432"
2023-12-04 22:02:56.638 CET [20520] LOG:  database system was shut down at 2023-12-04 22:02:51 CET
2023-12-04 22:02:56.642 CET [20519] LOG:  database system is ready to accept connections
2023-12-04 22:03:15.998 CET [20566] FATAL:  database "ulysse" does not exist
2023-12-04 22:07:12.566 CET [20774] ERROR:  syntax error at or near "IF" at character 30
2023-12-04 22:07:12.566 CET [20774] STATEMENT:  DROP DATABASE advent_of_code IF EXIST;
2023-12-04 22:07:34.538 CET [20820] ERROR:  database "advent_of_code" already exists
2023-12-04 22:07:34.538 CET [20820] STATEMENT:  CREATE DATABASE advent_of_code;
2023-12-04 22:08:36.818 CET [21132] ERROR:  column "1abc2" does not exist at character 27
2023-12-04 22:08:36.818 CET [21132] STATEMENT:  INSERT INTO day_1 VALUES
	("1abc2"),
	("pqr3stu8vwx"),
	("a1b2c3d4e5f"),
	("treb7uchet");
2023-12-04 22:09:00.909 CET [21173] ERROR:  invalid input syntax for type integer: "1abc2" at character 27
2023-12-04 22:09:00.909 CET [21173] STATEMENT:  INSERT INTO day_1 VALUES
	('1abc2'),
	('pqr3stu8vwx'),
	('a1b2c3d4e5f'),
	('treb7uchet');
2023-12-04 22:09:44.096 CET [21240] ERROR:  function min(integer, integer, integer, integer) does not exist at character 8
2023-12-04 22:09:44.096 CET [21240] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2023-12-04 22:09:44.096 CET [21240] STATEMENT:  select min (2, 3, 4, 1);
2023-12-04 22:09:49.391 CET [21240] ERROR:  function min(integer, integer, integer, integer) does not exist at character 8
2023-12-04 22:09:49.391 CET [21240] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2023-12-04 22:09:49.391 CET [21240] STATEMENT:  select min(2, 3, 4, 1);
2023-12-04 22:10:07.022 CET [21240] ERROR:  function min(integer, integer) does not exist at character 8
2023-12-04 22:10:07.022 CET [21240] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2023-12-04 22:10:07.022 CET [21240] STATEMENT:  select min(2, 3);
2023-12-04 22:11:50.023 CET [21301] ERROR:  syntax error at or near "SELECT" at character 24
2023-12-04 22:11:50.023 CET [21301] STATEMENT:  SELECT MIN(
	    subpos(SELECT data FROM day_1, "1"),
	    subpos(SELECT data FROM day_1, "2"),
	    subpos(SELECT data FROM day_1, "3"),
	    subpos(SELECT data FROM day_1, "4"),
	    subpos(SELECT data FROM day_1, "5"),
	    subpos(SELECT data FROM day_1, "6"),
	    subpos(SELECT data FROM day_1, "7"),
	    subpos(SELECT data FROM day_1, "8"),
	    subpos(SELECT data FROM day_1, "9"),
	);
2023-12-04 22:12:17.879 CET [21333] ERROR:  syntax error at or near "SELECT" at character 67
2023-12-04 22:12:17.879 CET [21333] STATEMENT:  SELECT MIN(
	    subpos((SELECT data FROM day_1), "1"),
	    subpos(SELECT data FROM day_1, "2"),
	    subpos(SELECT data FROM day_1, "3"),
	    subpos(SELECT data FROM day_1, "4"),
	    subpos(SELECT data FROM day_1, "5"),
	    subpos(SELECT data FROM day_1, "6"),
	    subpos(SELECT data FROM day_1, "7"),
	    subpos(SELECT data FROM day_1, "8"),
	    subpos(SELECT data FROM day_1, "9"),
	);
2023-12-04 22:12:44.365 CET [21376] ERROR:  syntax error at or near ")" at character 220
2023-12-04 22:12:44.365 CET [21376] STATEMENT:  SELECT MIN(
	    subpos(data, "1"),
	    subpos(data, "2"),
	    subpos(data, "3"),
	    subpos(data, "4"),
	    subpos(data, "5"),
	    subpos(data, "6"),
	    subpos(data, "7"),
	    subpos(data, "8"),
	    subpos(data, "9"),
	) FROM day_1;
2023-12-04 22:13:00.452 CET [21412] ERROR:  column "1" does not exist at character 30
2023-12-04 22:13:00.452 CET [21412] STATEMENT:  SELECT MIN(
	    subpos(data, "1"),
	    subpos(data, "2"),
	    subpos(data, "3"),
	    subpos(data, "4"),
	    subpos(data, "5"),
	    subpos(data, "6"),
	    subpos(data, "7"),
	    subpos(data, "8"),
	    subpos(data, "9")
	) FROM day_1;
2023-12-04 22:13:52.323 CET [21464] ERROR:  syntax error at or near ")" at character 400
2023-12-04 22:13:52.323 CET [21464] STATEMENT:  SELECT MIN(
	    subpos((SELECT data FROM day_1), "1"),
	    subpos((SELECT data FROM day_1), "2"),
	    subpos((SELECT data FROM day_1), "3"),
	    subpos((SELECT data FROM day_1), "4"),
	    subpos((SELECT data FROM day_1), "5"),
	    subpos((SELECT data FROM day_1), "6"),
	    subpos((SELECT data FROM day_1), "7"),
	    subpos((SELECT data FROM day_1), "8"),
	    subpos((SELECT data FROM day_1), "9"),
	);
2023-12-04 22:13:58.890 CET [21500] ERROR:  column "1" does not exist at character 50
2023-12-04 22:13:58.890 CET [21500] STATEMENT:  SELECT MIN(
	    subpos((SELECT data FROM day_1), "1"),
	    subpos((SELECT data FROM day_1), "2"),
	    subpos((SELECT data FROM day_1), "3"),
	    subpos((SELECT data FROM day_1), "4"),
	    subpos((SELECT data FROM day_1), "5"),
	    subpos((SELECT data FROM day_1), "6"),
	    subpos((SELECT data FROM day_1), "7"),
	    subpos((SELECT data FROM day_1), "8"),
	    subpos((SELECT data FROM day_1), "9")
	);
2023-12-04 22:14:30.510 CET [21549] ERROR:  function subpos(text, unknown) does not exist at character 17
2023-12-04 22:14:30.510 CET [21549] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2023-12-04 22:14:30.510 CET [21549] STATEMENT:  SELECT MIN(
	    subpos(data, '1'),
	    subpos(data, '2'),
	    subpos(data, '3'),
	    subpos(data, '4'),
	    subpos(data, '5'),
	    subpos(data, '6'),
	    subpos(data, '7'),
	    subpos(data, '8'),
	    subpos(data, '9')
	) FROM day_1;
2023-12-04 22:15:09.351 CET [21618] ERROR:  column "1" does not exist at character 50
2023-12-04 22:15:09.351 CET [21618] STATEMENT:  SELECT MIN(
	    subpos((SELECT data FROM day_1), "1"),
	    subpos((SELECT data FROM day_1), '2'),
	    subpos((SELECT data FROM day_1), '3'),
	    subpos((SELECT data FROM day_1), '4'),
	    subpos((SELECT data FROM day_1), '5'),
	    subpos((SELECT data FROM day_1), '6'),
	    subpos((SELECT data FROM day_1), '7'),
	    subpos((SELECT data FROM day_1), '8'),
	    subpos((SELECT data FROM day_1), '9')
	);
2023-12-04 22:15:19.909 CET [21647] ERROR:  function subpos(text, unknown) does not exist at character 17
2023-12-04 22:15:19.909 CET [21647] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2023-12-04 22:15:19.909 CET [21647] STATEMENT:  SELECT MIN(
	    subpos((SELECT data FROM day_1), '1'),
	    subpos((SELECT data FROM day_1), '2'),
	    subpos((SELECT data FROM day_1), '3'),
	    subpos((SELECT data FROM day_1), '4'),
	    subpos((SELECT data FROM day_1), '5'),
	    subpos((SELECT data FROM day_1), '6'),
	    subpos((SELECT data FROM day_1), '7'),
	    subpos((SELECT data FROM day_1), '8'),
	    subpos((SELECT data FROM day_1), '9')
	);
2023-12-04 22:16:07.302 CET [21688] ERROR:  syntax error at or near "FROM" at character 35
2023-12-04 22:16:07.302 CET [21688] STATEMENT:  SELECT MIN(
	    subpos(data, '1') FROM day_1,
	    subpos(data, '2') FROM day_1,
	    subpos(data, '3') FROM day_1,
	    subpos(data, '4') FROM day_1,
	    subpos(data, '5') FROM day_1,
	    subpos(data, '6') FROM day_1,
	    subpos(data, '7') FROM day_1,
	    subpos(data, '8') FROM day_1,
	    subpos(data, '9') FROM day_1
	);
2023-12-04 22:20:11.532 CET [21847] ERROR:  syntax error at or near "FROM" at character 39
2023-12-04 22:20:11.532 CET [21847] STATEMENT:  SELECT MIN(
	    position('1' in data) FROM day_1,
	    position('2' in data) FROM day_1,
	    position('3' in data) FROM day_1,
	    position('4' in data) FROM day_1,
	    position('5' in data) FROM day_1,
	    position('6' in data) FROM day_1,
	    position('7' in data) FROM day_1,
	    position('8' in data) FROM day_1,
	    position('9' in data) FROM day_1
	);
2023-12-04 22:20:32.763 CET [21886] ERROR:  function min(integer, integer, integer, integer, integer, integer, integer, integer, integer) does not exist at character 8
2023-12-04 22:20:32.763 CET [21886] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2023-12-04 22:20:32.763 CET [21886] STATEMENT:  SELECT MIN(
	    position('1' in data),
	    position('2' in data),
	    position('3' in data),
	    position('4' in data),
	    position('5' in data),
	    position('6' in data),
	    position('7' in data),
	    position('8' in data),
	    position('9' in data)
	) FROM day_1;
2023-12-04 22:23:54.047 CET [21954] ERROR:  syntax error at or near "FROM" at character 291
2023-12-04 22:23:54.047 CET [21954] STATEMENT:  SELECT MIN(Col) FROM (VALUES
	    (position('1' in data)),
	    (position('2' in data)),
	    (position('3' in data)),
	    (position('4' in data)),
	    (position('5' in data)),
	    (position('6' in data)),
	    (position('7' in data)),
	    (position('8' in data)),
	    (position('9' in data))
	 FROM day_1) AS X(Col);
2023-12-04 22:24:48.795 CET [21995] ERROR:  syntax error at or near "FROM" at character 57
2023-12-04 22:24:48.795 CET [21995] STATEMENT:  SELECT MIN(Col) FROM (VALUES
	    (position('1' in data) FROM day_1),
	    (position('2' in data) FROM day_1),
	    (position('3' in data) FROM day_1),
	    (position('4' in data) FROM day_1),
	    (position('5' in data) FROM day_1),
	    (position('6' in data) FROM day_1),
	    (position('7' in data) FROM day_1),
	    (position('8' in data) FROM day_1),
	    (position('9' in data) FROM day_1))
	AS X(Col);
2023-12-04 22:29:08.851 CET [22146] ERROR:  syntax error at or near ";" at character 534
2023-12-04 22:29:08.851 CET [22146] STATEMENT:  SELECT 
	    index_1,
	    index_2,
	    index_3,
	    index_4,
	    index_5,
	    index_6,
	    index_7,
	    index_8,
	    index_9
	FROM (
	    SELECT
	        position('1' in data) AS index_1,
	        position('2' in data) AS index_2,
	        position('3' in data) AS index_3,
	        position('4' in data) AS index_4,
	        position('5' in data) AS index_5,
	        position('6' in data) AS index_6,
	        position('7' in data) AS index_7,
	        position('8' in data) AS index_8,
	        position('9' in data) AS index_9
	    FROM day_1;
	)
	WHERE
	    index_1 >= 0
	AND
	    index_2 >= 0
	AND
	    index_3 >= 0
	AND
	    index_4 >= 0
	AND
	    index_5 >= 0
	AND
	    index_6 >= 0
	AND
	    index_7 >= 0
	AND
	    index_8 >= 0
	AND
	    index_9 >= 0
	;
2023-12-04 22:29:13.875 CET [22180] ERROR:  subquery in FROM must have an alias at character 130
2023-12-04 22:29:13.875 CET [22180] HINT:  For example, FROM (SELECT ...) [AS] foo.
2023-12-04 22:29:13.875 CET [22180] STATEMENT:  SELECT 
	    index_1,
	    index_2,
	    index_3,
	    index_4,
	    index_5,
	    index_6,
	    index_7,
	    index_8,
	    index_9
	FROM (
	    SELECT
	        position('1' in data) AS index_1,
	        position('2' in data) AS index_2,
	        position('3' in data) AS index_3,
	        position('4' in data) AS index_4,
	        position('5' in data) AS index_5,
	        position('6' in data) AS index_6,
	        position('7' in data) AS index_7,
	        position('8' in data) AS index_8,
	        position('9' in data) AS index_9
	    FROM day_1
	)
	WHERE
	    index_1 >= 0
	AND
	    index_2 >= 0
	AND
	    index_3 >= 0
	AND
	    index_4 >= 0
	AND
	    index_5 >= 0
	AND
	    index_6 >= 0
	AND
	    index_7 >= 0
	AND
	    index_8 >= 0
	AND
	    index_9 >= 0
	;
2023-12-04 22:33:31.711 CET [22395] ERROR:  syntax error at or near "FROM" at character 182
2023-12-04 22:33:31.711 CET [22395] STATEMENT:  SELECT MIN(Col) 
	FROM (
	    VALUES
	    (index_1),
	    (index_2),
	    (index_3),
	    (index_4),
	    (index_5),
	    (index_6),
	    (index_7),
	    (index_8),
	    (index_9)
	) AS X(Col)
	FROM (
	    SELECT
	        position('1' in data) AS index_1,
	        position('2' in data) AS index_2,
	        position('3' in data) AS index_3,
	        position('4' in data) AS index_4,
	        position('5' in data) AS index_5,
	        position('6' in data) AS index_6,
	        position('7' in data) AS index_7,
	        position('8' in data) AS index_8,
	        position('9' in data) AS index_9
	    FROM day_1
	) AS indexes;
2023-12-04 22:33:36.529 CET [22452] ERROR:  syntax error at or near "FROM" at character 182
2023-12-04 22:33:36.529 CET [22452] STATEMENT:  SELECT MIN(Col) 
	FROM (
	    VALUES
	    (index_1),
	    (index_2),
	    (index_3),
	    (index_4),
	    (index_5),
	    (index_6),
	    (index_7),
	    (index_8),
	    (index_9)
	) AS X(Col)
	FROM (
	    SELECT
	        position('1' in data) AS index_1,
	        position('2' in data) AS index_2,
	        position('3' in data) AS index_3,
	        position('4' in data) AS index_4,
	        position('5' in data) AS index_5,
	        position('6' in data) AS index_6,
	        position('7' in data) AS index_7,
	        position('8' in data) AS index_8,
	        position('9' in data) AS index_9
	    FROM day_1
	) AS indexes;
2023-12-04 22:35:19.138 CET [22511] ERROR:  syntax error at or near "SELECT" at character 19
2023-12-04 22:35:19.138 CET [22511] STATEMENT:  SELECT LEAST(
	    SELECT
	        position('1' in data) AS index_1,
	        position('2' in data) AS index_2,
	        position('3' in data) AS index_3,
	        position('4' in data) AS index_4,
	        position('5' in data) AS index_5,
	        position('6' in data) AS index_6,
	        position('7' in data) AS index_7,
	        position('8' in data) AS index_8,
	        position('9' in data) AS index_9
	    FROM day_1
	);
2023-12-04 22:40:21.271 CET [22668] ERROR:  syntax error at or near "AS" at character 222
2023-12-04 22:40:21.271 CET [22668] STATEMENT:  SELECT LEAST(
	    index_1,
	    index_2,
	    index_3,
	    index_4,
	    index_5,
	    index_6,
	    index_7,
	    index_8,
	    index_9
	)
	FROM (
	    SELECT
	        CASE    
	            WHEN position('1' in data) == 0 THEN NULL AS index_1
	            ELSE position('1' in data) AS index_1
	        END,
	        position('1' in data) AS index_1,
	        position('2' in data) AS index_2,
	        position('3' in data) AS index_3,
	        position('4' in data) AS index_4,
	        position('5' in data) AS index_5,
	        position('6' in data) AS index_6,
	        position('7' in data) AS index_7,
	        position('8' in data) AS index_8,
	        position('9' in data) AS index_9
	    FROM day_1
	) AS indexes;
2023-12-04 22:40:32.231 CET [22703] ERROR:  operator does not exist: integer == integer at character 207
2023-12-04 22:40:32.231 CET [22703] HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
2023-12-04 22:40:32.231 CET [22703] STATEMENT:  SELECT LEAST(
	    index_1,
	    index_2,
	    index_3,
	    index_4,
	    index_5,
	    index_6,
	    index_7,
	    index_8,
	    index_9
	)
	FROM (
	    SELECT
	        CASE    
	            WHEN position('1' in data) == 0 THEN NULL
	            ELSE position('1' in data)
	        END,
	        position('1' in data) AS index_1,
	        position('2' in data) AS index_2,
	        position('3' in data) AS index_3,
	        position('4' in data) AS index_4,
	        position('5' in data) AS index_5,
	        position('6' in data) AS index_6,
	        position('7' in data) AS index_7,
	        position('8' in data) AS index_8,
	        position('9' in data) AS index_9
	    FROM day_1
	) AS indexes;
2023-12-04 22:41:33.078 CET [22778] ERROR:  column "index_1" does not exist at character 19
2023-12-04 22:41:33.078 CET [22778] STATEMENT:  SELECT LEAST(
	    index_1,
	    index_2,
	    index_3,
	    index_4,
	    index_5,
	    index_6,
	    index_7,
	    index_8,
	    index_9
	)
	FROM (
	    SELECT
	        CASE    
	            WHEN position('1' in data) = 0 THEN NULL
	            ELSE position('1' in data)
	        END,
	        CASE    
	            WHEN position('2' in data) = 0 THEN NULL
	            ELSE position('2' in data)
	        END,
	        CASE    
	            WHEN position('3' in data) = 0 THEN NULL
	            ELSE position('3' in data)
	        END,
	        CASE    
	            WHEN position('4' in data) = 0 THEN NULL
	            ELSE position('4' in data)
	        END,
	        CASE    
	            WHEN position('5' in data) = 0 THEN NULL
	            ELSE position('5' in data)
	        END,
	        CASE    
	            WHEN position('6' in data) = 0 THEN NULL
	            ELSE position('6' in data)
	        END,
	        CASE    
	            WHEN position('7' in data) = 0 THEN NULL
	            ELSE position('7' in data)
	        END,
	        CASE    
	            WHEN position('8' in data) = 0 THEN NULL
	            ELSE position('8' in data)
	        END,
	        CASE    
	            WHEN position('9' in data) = 0 THEN NULL
	            ELSE position('9' in data)
	        END
	        
	        
	        
	        
	        
	        
	        
	        
	        
	    FROM day_1
	) AS indexes;
2023-12-04 22:41:44.820 CET [22813] ERROR:  column "index_2" does not exist at character 32
2023-12-04 22:41:44.820 CET [22813] HINT:  Perhaps you meant to reference the column "indexes.index_1".
2023-12-04 22:41:44.820 CET [22813] STATEMENT:  SELECT LEAST(
	    index_1,
	    index_2,
	    index_3,
	    index_4,
	    index_5,
	    index_6,
	    index_7,
	    index_8,
	    index_9
	)
	FROM (
	    SELECT
	        CASE    
	            WHEN position('1' in data) = 0 THEN NULL
	            ELSE position('1' in data)
	        END AS index_1,
	        CASE    
	            WHEN position('2' in data) = 0 THEN NULL
	            ELSE position('2' in data)
	        END,
	        CASE    
	            WHEN position('3' in data) = 0 THEN NULL
	            ELSE position('3' in data)
	        END,
	        CASE    
	            WHEN position('4' in data) = 0 THEN NULL
	            ELSE position('4' in data)
	        END,
	        CASE    
	            WHEN position('5' in data) = 0 THEN NULL
	            ELSE position('5' in data)
	        END,
	        CASE    
	            WHEN position('6' in data) = 0 THEN NULL
	            ELSE position('6' in data)
	        END,
	        CASE    
	            WHEN position('7' in data) = 0 THEN NULL
	            ELSE position('7' in data)
	        END,
	        CASE    
	            WHEN position('8' in data) = 0 THEN NULL
	            ELSE position('8' in data)
	        END,
	        CASE    
	            WHEN position('9' in data) = 0 THEN NULL
	            ELSE position('9' in data)
	        END
	        
	        
	        
	        
	        
	        
	        
	        
	        
	    FROM day_1
	) AS indexes;
2023-12-04 22:46:09.315 CET [22995] ERROR:  column "data" does not exist at character 13
2023-12-04 22:46:09.315 CET [22995] STATEMENT:  SELECT 
	    data, 
	    LEAST(
	        index_1,
	        index_2,
	        index_3,
	        index_4,
	        index_5,
	        index_6,
	        index_7,
	        index_8,
	        index_9
	    ) 
	    || 
	    GREATEST(
	        index_1,
	        index_2,
	        index_3,
	        index_4,
	        index_5,
	        index_6,
	        index_7,
	        index_8,
	        index_9
	    ) AS REP
	FROM (
	    SELECT
	        CASE    
	            WHEN position('1' in data) = 0 THEN NULL
	            ELSE position('1' in data)
	        END AS index_1,
	        CASE    
	            WHEN position('2' in data) = 0 THEN NULL
	            ELSE position('2' in data)
	        END AS index_2,
	        CASE    
	            WHEN position('3' in data) = 0 THEN NULL
	            ELSE position('3' in data)
	        END AS index_3,
	        CASE    
	            WHEN position('4' in data) = 0 THEN NULL
	            ELSE position('4' in data)
	        END AS index_4,
	        CASE    
	            WHEN position('5' in data) = 0 THEN NULL
	            ELSE position('5' in data)
	        END AS index_5,
	        CASE    
	            WHEN position('6' in data) = 0 THEN NULL
	            ELSE position('6' in data)
	        END AS index_6,
	        CASE    
	            WHEN position('7' in data) = 0 THEN NULL
	            ELSE position('7' in data)
	        END AS index_7,
	        CASE    
	            WHEN position('8' in data) = 0 THEN NULL
	            ELSE position('8' in data)
	        END AS index_8,
	        CASE    
	            WHEN position('9' in data) = 0 THEN NULL
	            ELSE position('9' in data)
	        END AS index_9
	    FROM day_1
	) AS indexes;
2023-12-04 22:46:35.126 CET [23031] ERROR:  operator does not exist: integer || integer at character 194
2023-12-04 22:46:35.126 CET [23031] HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
2023-12-04 22:46:35.126 CET [23031] STATEMENT:  SELECT 
	    data, 
	    LEAST(
	        index_1,
	        index_2,
	        index_3,
	        index_4,
	        index_5,
	        index_6,
	        index_7,
	        index_8,
	        index_9
	    ) 
	    || 
	    GREATEST(
	        index_1,
	        index_2,
	        index_3,
	        index_4,
	        index_5,
	        index_6,
	        index_7,
	        index_8,
	        index_9
	    ) AS REP
	FROM (
	    SELECT
	        CASE    
	            WHEN position('1' in data) = 0 THEN NULL
	            ELSE position('1' in data)
	        END AS index_1,
	        CASE    
	            WHEN position('2' in data) = 0 THEN NULL
	            ELSE position('2' in data)
	        END AS index_2,
	        CASE    
	            WHEN position('3' in data) = 0 THEN NULL
	            ELSE position('3' in data)
	        END AS index_3,
	        CASE    
	            WHEN position('4' in data) = 0 THEN NULL
	            ELSE position('4' in data)
	        END AS index_4,
	        CASE    
	            WHEN position('5' in data) = 0 THEN NULL
	            ELSE position('5' in data)
	        END AS index_5,
	        CASE    
	            WHEN position('6' in data) = 0 THEN NULL
	            ELSE position('6' in data)
	        END AS index_6,
	        CASE    
	            WHEN position('7' in data) = 0 THEN NULL
	            ELSE position('7' in data)
	        END AS index_7,
	        CASE    
	            WHEN position('8' in data) = 0 THEN NULL
	            ELSE position('8' in data)
	        END AS index_8,
	        CASE    
	            WHEN position('9' in data) = 0 THEN NULL
	            ELSE position('9' in data)
	        END AS index_9,
	        data
	    FROM day_1
	) AS indexes;
2023-12-04 22:51:36.796 CET [23188] ERROR:  syntax error at or near "AS" at character 391
2023-12-04 22:51:36.796 CET [23188] STATEMENT:  SELECT 
	    data,
	    CONCAT( 
	    LEAST(
	        index_1,
	        index_2,
	        index_3,
	        index_4,
	        index_5,
	        index_6,
	        index_7,
	        index_8,
	        index_9
	    )::TEXT, 
	    GREATEST(
	        index_1,
	        index_2,
	        index_3,
	        index_4,
	        index_5,
	        index_6,
	        index_7,
	        index_8,
	        index_9
	    )::TEXT
	    AS REP
	FROM (
	    SELECT
	        CASE    
	            WHEN position('1' in data) = 0 THEN NULL
	            ELSE position('1' in data)
	        END AS index_1,
	        CASE    
	            WHEN position('2' in data) = 0 THEN NULL
	            ELSE position('2' in data)
	        END AS index_2,
	        CASE    
	            WHEN position('3' in data) = 0 THEN NULL
	            ELSE position('3' in data)
	        END AS index_3,
	        CASE    
	            WHEN position('4' in data) = 0 THEN NULL
	            ELSE position('4' in data)
	        END AS index_4,
	        CASE    
	            WHEN position('5' in data) = 0 THEN NULL
	            ELSE position('5' in data)
	        END AS index_5,
	        CASE    
	            WHEN position('6' in data) = 0 THEN NULL
	            ELSE position('6' in data)
	        END AS index_6,
	        CASE    
	            WHEN position('7' in data) = 0 THEN NULL
	            ELSE position('7' in data)
	        END AS index_7,
	        CASE    
	            WHEN position('8' in data) = 0 THEN NULL
	            ELSE position('8' in data)
	        END AS index_8,
	        CASE    
	            WHEN position('9' in data) = 0 THEN NULL
	            ELSE position('9' in data)
	        END AS index_9,
	        data
	    FROM day_1
	) AS indexes;
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
2023-12-04 23:04:55.124 CET [23509] ERROR:  function sum(text) does not exist at character 23
2023-12-04 23:04:55.124 CET [23509] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2023-12-04 23:04:55.124 CET [23509] STATEMENT:  SELECT 
	    data,
	    SUM(
	        substr(
	            data,
	            LEAST(
	                index_1,
	                index_2,
	                index_3,
	                index_4,
	                index_5,
	                index_6,
	                index_7,
	                index_8,
	                index_9
	            ),
	            1
	        )
	        ||
	        substr(
	            data,
	            GREATEST(
	                index_1,
	                index_2,
	                index_3,
	                index_4,
	                index_5,
	                index_6,
	                index_7,
	                index_8,
	                index_9
	            ),
	            1
	        )
	    ) AS rep
	FROM (
	    SELECT
	        CASE    
	            WHEN position('1' in data) = 0 THEN NULL
	            ELSE position('1' in data)
	        END AS index_1,
	        CASE    
	            WHEN position('2' in data) = 0 THEN NULL
	            ELSE position('2' in data)
	        END AS index_2,
	        CASE    
	            WHEN position('3' in data) = 0 THEN NULL
	            ELSE position('3' in data)
	        END AS index_3,
	        CASE    
	            WHEN position('4' in data) = 0 THEN NULL
	            ELSE position('4' in data)
	        END AS index_4,
	        CASE    
	            WHEN position('5' in data) = 0 THEN NULL
	            ELSE position('5' in data)
	        END AS index_5,
	        CASE    
	            WHEN position('6' in data) = 0 THEN NULL
	            ELSE position('6' in data)
	        END AS index_6,
	        CASE    
	            WHEN position('7' in data) = 0 THEN NULL
	            ELSE position('7' in data)
	        END AS index_7,
	        CASE    
	            WHEN position('8' in data) = 0 THEN NULL
	            ELSE position('8' in data)
	        END AS index_8,
	        CASE    
	            WHEN position('9' in data) = 0 THEN NULL
	            ELSE position('9' in data)
	        END AS index_9,
	        data
	    FROM day_1
	) AS indexes;
2023-12-04 23:05:28.882 CET [23546] ERROR:  type "interger" does not exist at character 815
2023-12-04 23:05:28.882 CET [23546] STATEMENT:  SELECT 
	    data,
	    SUM(
	        CAST(
	            substr(
	                data,
	                LEAST(
	                    index_1,
	                    index_2,
	                    index_3,
	                    index_4,
	                    index_5,
	                    index_6,
	                    index_7,
	                    index_8,
	                    index_9
	                ),
	                1
	            )
	            ||
	            substr(
	                data,
	                GREATEST(
	                    index_1,
	                    index_2,
	                    index_3,
	                    index_4,
	                    index_5,
	                    index_6,
	                    index_7,
	                    index_8,
	                    index_9
	                ),
	                1
	            ) AS INTERGER
	        )
	    ) AS rep
	FROM (
	    SELECT
	        CASE    
	            WHEN position('1' in data) = 0 THEN NULL
	            ELSE position('1' in data)
	        END AS index_1,
	        CASE    
	            WHEN position('2' in data) = 0 THEN NULL
	            ELSE position('2' in data)
	        END AS index_2,
	        CASE    
	            WHEN position('3' in data) = 0 THEN NULL
	            ELSE position('3' in data)
	        END AS index_3,
	        CASE    
	            WHEN position('4' in data) = 0 THEN NULL
	            ELSE position('4' in data)
	        END AS index_4,
	        CASE    
	            WHEN position('5' in data) = 0 THEN NULL
	            ELSE position('5' in data)
	        END AS index_5,
	        CASE    
	            WHEN position('6' in data) = 0 THEN NULL
	            ELSE position('6' in data)
	        END AS index_6,
	        CASE    
	            WHEN position('7' in data) = 0 THEN NULL
	            ELSE position('7' in data)
	        END AS index_7,
	        CASE    
	            WHEN position('8' in data) = 0 THEN NULL
	            ELSE position('8' in data)
	        END AS index_8,
	        CASE    
	            WHEN position('9' in data) = 0 THEN NULL
	            ELSE position('9' in data)
	        END AS index_9,
	        data
	    FROM day_1
	) AS indexes;
2023-12-04 23:05:36.617 CET [23587] ERROR:  column "indexes.data" must appear in the GROUP BY clause or be used in an aggregate function at character 13
2023-12-04 23:05:36.617 CET [23587] STATEMENT:  SELECT 
	    data,
	    SUM(
	        CAST(
	            substr(
	                data,
	                LEAST(
	                    index_1,
	                    index_2,
	                    index_3,
	                    index_4,
	                    index_5,
	                    index_6,
	                    index_7,
	                    index_8,
	                    index_9
	                ),
	                1
	            )
	            ||
	            substr(
	                data,
	                GREATEST(
	                    index_1,
	                    index_2,
	                    index_3,
	                    index_4,
	                    index_5,
	                    index_6,
	                    index_7,
	                    index_8,
	                    index_9
	                ),
	                1
	            ) AS INT
	        )
	    ) AS rep
	FROM (
	    SELECT
	        CASE    
	            WHEN position('1' in data) = 0 THEN NULL
	            ELSE position('1' in data)
	        END AS index_1,
	        CASE    
	            WHEN position('2' in data) = 0 THEN NULL
	            ELSE position('2' in data)
	        END AS index_2,
	        CASE    
	            WHEN position('3' in data) = 0 THEN NULL
	            ELSE position('3' in data)
	        END AS index_3,
	        CASE    
	            WHEN position('4' in data) = 0 THEN NULL
	            ELSE position('4' in data)
	        END AS index_4,
	        CASE    
	            WHEN position('5' in data) = 0 THEN NULL
	            ELSE position('5' in data)
	        END AS index_5,
	        CASE    
	            WHEN position('6' in data) = 0 THEN NULL
	            ELSE position('6' in data)
	        END AS index_6,
	        CASE    
	            WHEN position('7' in data) = 0 THEN NULL
	            ELSE position('7' in data)
	        END AS index_7,
	        CASE    
	            WHEN position('8' in data) = 0 THEN NULL
	            ELSE position('8' in data)
	        END AS index_8,
	        CASE    
	            WHEN position('9' in data) = 0 THEN NULL
	            ELSE position('9' in data)
	        END AS index_9,
	        data
	    FROM day_1
	) AS indexes;
2023-12-04 23:06:20.466 CET [23654] ERROR:  syntax error at or near "FROM" at character 2051
2023-12-04 23:06:20.466 CET [23654] STATEMENT:  SELECT 
	    SUM(
	        CAST(
	            substr(
	                data,
	                LEAST(
	                    index_1,
	                    index_2,
	                    index_3,
	                    index_4,
	                    index_5,
	                    index_6,
	                    index_7,
	                    index_8,
	                    index_9
	                ),
	                1
	            )
	            ||
	            substr(
	                data,
	                GREATEST(
	                    index_1,
	                    index_2,
	                    index_3,
	                    index_4,
	                    index_5,
	                    index_6,
	                    index_7,
	                    index_8,
	                    index_9
	                ),
	                1
	            ) AS INT
	        )
	    ) AS rep
	FROM (
	    SELECT
	        CASE    
	            WHEN position('1' in data) = 0 THEN NULL
	            ELSE position('1' in data)
	        END AS index_1,
	        CASE    
	            WHEN position('2' in data) = 0 THEN NULL
	            ELSE position('2' in data)
	        END AS index_2,
	        CASE    
	            WHEN position('3' in data) = 0 THEN NULL
	            ELSE position('3' in data)
	        END AS index_3,
	        CASE    
	            WHEN position('4' in data) = 0 THEN NULL
	            ELSE position('4' in data)
	        END AS index_4,
	        CASE    
	            WHEN position('5' in data) = 0 THEN NULL
	            ELSE position('5' in data)
	        END AS index_5,
	        CASE    
	            WHEN position('6' in data) = 0 THEN NULL
	            ELSE position('6' in data)
	        END AS index_6,
	        CASE    
	            WHEN position('7' in data) = 0 THEN NULL
	            ELSE position('7' in data)
	        END AS index_7,
	        CASE    
	            WHEN position('8' in data) = 0 THEN NULL
	            ELSE position('8' in data)
	        END AS index_8,
	        CASE    
	            WHEN position('9' in data) = 0 THEN NULL
	            ELSE position('9' in data)
	        END AS index_9,
	    FROM day_1
	) AS indexes;
2023-12-04 23:06:33.807 CET [23690] ERROR:  column "data" does not exist at character 68
2023-12-04 23:06:33.807 CET [23690] STATEMENT:  SELECT 
	    SUM(
	        CAST(
	            substr(
	                data,
	                LEAST(
	                    index_1,
	                    index_2,
	                    index_3,
	                    index_4,
	                    index_5,
	                    index_6,
	                    index_7,
	                    index_8,
	                    index_9
	                ),
	                1
	            )
	            ||
	            substr(
	                data,
	                GREATEST(
	                    index_1,
	                    index_2,
	                    index_3,
	                    index_4,
	                    index_5,
	                    index_6,
	                    index_7,
	                    index_8,
	                    index_9
	                ),
	                1
	            ) AS INT
	        )
	    ) AS rep
	FROM (
	    SELECT
	        CASE    
	            WHEN position('1' in data) = 0 THEN NULL
	            ELSE position('1' in data)
	        END AS index_1,
	        CASE    
	            WHEN position('2' in data) = 0 THEN NULL
	            ELSE position('2' in data)
	        END AS index_2,
	        CASE    
	            WHEN position('3' in data) = 0 THEN NULL
	            ELSE position('3' in data)
	        END AS index_3,
	        CASE    
	            WHEN position('4' in data) = 0 THEN NULL
	            ELSE position('4' in data)
	        END AS index_4,
	        CASE    
	            WHEN position('5' in data) = 0 THEN NULL
	            ELSE position('5' in data)
	        END AS index_5,
	        CASE    
	            WHEN position('6' in data) = 0 THEN NULL
	            ELSE position('6' in data)
	        END AS index_6,
	        CASE    
	            WHEN position('7' in data) = 0 THEN NULL
	            ELSE position('7' in data)
	        END AS index_7,
	        CASE    
	            WHEN position('8' in data) = 0 THEN NULL
	            ELSE position('8' in data)
	        END AS index_8,
	        CASE    
	            WHEN position('9' in data) = 0 THEN NULL
	            ELSE position('9' in data)
	        END AS index_9
	    FROM day_1
	) AS indexes;
2023-12-04 23:10:58.168 CET [23997] ERROR:  relation "day_1" already exists
2023-12-04 23:10:58.168 CET [23997] STATEMENT:  CREATE TABLE day_1 (
	    id serial NOT NULL PRIMARY KEY,
	    data text NOT NULL
	);
2023-12-04 23:14:59.053 CET [24311] ERROR:  column "tmp" does not exist at character 561
2023-12-04 23:14:59.053 CET [24311] STATEMENT:  SELECT
	    data,
	    substr(
	        data,
	        LEAST(
	            index_1,
	            index_2,
	            index_3,
	            index_4,
	            index_5,
	            index_6,
	            index_7,
	            index_8,
	            index_9
	        ),
	        1
	    )
	    ||
	    substr(
	        data,
	        GREATEST(
	            index_1,
	            index_2,
	            index_3,
	            index_4,
	            index_5,
	            index_6,
	            index_7,
	            index_8,
	            index_9
	        ),
	        1
	    ) AS tmp,
	    SUM(CAST(tmp AS INT)) AS answer
	FROM (
	    SELECT
	        CASE    
	            WHEN position('1' in data) = 0 THEN NULL
	            ELSE position('1' in data)
	        END AS index_1,
	        CASE    
	            WHEN position('2' in data) = 0 THEN NULL
	            ELSE position('2' in data)
	        END AS index_2,
	        CASE    
	            WHEN position('3' in data) = 0 THEN NULL
	            ELSE position('3' in data)
	        END AS index_3,
	        CASE    
	            WHEN position('4' in data) = 0 THEN NULL
	            ELSE position('4' in data)
	        END AS index_4,
	        CASE    
	            WHEN position('5' in data) = 0 THEN NULL
	            ELSE position('5' in data)
	        END AS index_5,
	        CASE    
	            WHEN position('6' in data) = 0 THEN NULL
	            ELSE position('6' in data)
	        END AS index_6,
	        CASE    
	            WHEN position('7' in data) = 0 THEN NULL
	            ELSE position('7' in data)
	        END AS index_7,
	        CASE    
	            WHEN position('8' in data) = 0 THEN NULL
	            ELSE position('8' in data)
	        END AS index_8,
	        CASE    
	            WHEN position('9' in data) = 0 THEN NULL
	            ELSE position('9' in data)
	        END AS index_9,
	        data
	    FROM day_1
	) AS indexes;
2023-12-04 23:15:43.493 CET [24349] ERROR:  column "indexes.data" must appear in the GROUP BY clause or be used in an aggregate function at character 12
2023-12-04 23:15:43.493 CET [24349] STATEMENT:  SELECT
	    data,
	    substr(
	        data,
	        LEAST(
	            index_1,
	            index_2,
	            index_3,
	            index_4,
	            index_5,
	            index_6,
	            index_7,
	            index_8,
	            index_9
	        ),
	        1
	    )
	    ||
	    substr(
	        data,
	        GREATEST(
	            index_1,
	            index_2,
	            index_3,
	            index_4,
	            index_5,
	            index_6,
	            index_7,
	            index_8,
	            index_9
	        ),
	        1
	    ) AS tmp,
	    SUM(
	        CAST(
	            substr(
	                    data,
	                    LEAST(
	                        index_1,
	                        index_2,
	                        index_3,
	                        index_4,
	                        index_5,
	                        index_6,
	                        index_7,
	                        index_8,
	                        index_9
	                    ),
	                    1
	                )
	                ||
	                substr(
	                    data,
	                    GREATEST(
	                        index_1,
	                        index_2,
	                        index_3,
	                        index_4,
	                        index_5,
	                        index_6,
	                        index_7,
	                        index_8,
	                        index_9
	                    ),
	                    1
	                )
	            AS INT
	        )
	        ) AS answer
	FROM (
	    SELECT
	        CASE    
	            WHEN position('1' in data) = 0 THEN NULL
	            ELSE position('1' in data)
	        END AS index_1,
	        CASE    
	            WHEN position('2' in data) = 0 THEN NULL
	            ELSE position('2' in data)
	        END AS index_2,
	        CASE    
	            WHEN position('3' in data) = 0 THEN NULL
	            ELSE position('3' in data)
	        END AS index_3,
	        CASE    
	            WHEN position('4' in data) = 0 THEN NULL
	            ELSE position('4' in data)
	        END AS index_4,
	        CASE    
	            WHEN position('5' in data) = 0 THEN NULL
	            ELSE position('5' in data)
	        END AS index_5,
	        CASE    
	            WHEN position('6' in data) = 0 THEN NULL
	            ELSE position('6' in data)
	        END AS index_6,
	        CASE    
	            WHEN position('7' in data) = 0 THEN NULL
	            ELSE position('7' in data)
	        END AS index_7,
	        CASE    
	            WHEN position('8' in data) = 0 THEN NULL
	            ELSE position('8' in data)
	        END AS index_8,
	        CASE    
	            WHEN position('9' in data) = 0 THEN NULL
	            ELSE position('9' in data)
	        END AS index_9,
	        data
	    FROM day_1
	) AS indexes;
2023-12-04 23:15:53.654 CET [24384] ERROR:  function substr(integer, integer) does not exist at character 22
2023-12-04 23:15:53.654 CET [24384] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2023-12-04 23:15:53.654 CET [24384] STATEMENT:  SELECT
	    data,
	    substr(
	        
	        LEAST(
	            index_1,
	            index_2,
	            index_3,
	            index_4,
	            index_5,
	            index_6,
	            index_7,
	            index_8,
	            index_9
	        ),
	        1
	    )
	    ||
	    substr(
	        data,
	        GREATEST(
	            index_1,
	            index_2,
	            index_3,
	            index_4,
	            index_5,
	            index_6,
	            index_7,
	            index_8,
	            index_9
	        ),
	        1
	    ) AS tmp,
	    SUM(
	        CAST(
	            substr(
	                    data,
	                    LEAST(
	                        index_1,
	                        index_2,
	                        index_3,
	                        index_4,
	                        index_5,
	                        index_6,
	                        index_7,
	                        index_8,
	                        index_9
	                    ),
	                    1
	                )
	                ||
	                substr(
	                    data,
	                    GREATEST(
	                        index_1,
	                        index_2,
	                        index_3,
	                        index_4,
	                        index_5,
	                        index_6,
	                        index_7,
	                        index_8,
	                        index_9
	                    ),
	                    1
	                )
	            AS INT
	        )
	        ) AS answer
	FROM (
	    SELECT
	        CASE    
	            WHEN position('1' in data) = 0 THEN NULL
	            ELSE position('1' in data)
	        END AS index_1,
	        CASE    
	            WHEN position('2' in data) = 0 THEN NULL
	            ELSE position('2' in data)
	        END AS index_2,
	        CASE    
	            WHEN position('3' in data) = 0 THEN NULL
	            ELSE position('3' in data)
	        END AS index_3,
	        CASE    
	            WHEN position('4' in data) = 0 THEN NULL
	            ELSE position('4' in data)
	        END AS index_4,
	        CASE    
	            WHEN position('5' in data) = 0 THEN NULL
	            ELSE position('5' in data)
	        END AS index_5,
	        CASE    
	            WHEN position('6' in data) = 0 THEN NULL
	            ELSE position('6' in data)
	        END AS index_6,
	        CASE    
	            WHEN position('7' in data) = 0 THEN NULL
	            ELSE position('7' in data)
	        END AS index_7,
	        CASE    
	            WHEN position('8' in data) = 0 THEN NULL
	            ELSE position('8' in data)
	        END AS index_8,
	        CASE    
	            WHEN position('9' in data) = 0 THEN NULL
	            ELSE position('9' in data)
	        END AS index_9,
	        data
	    FROM day_1
	) AS indexes;
2023-12-04 23:18:41.080 CET [24556] ERROR:  relation "day_1" already exists
2023-12-04 23:18:41.080 CET [24556] STATEMENT:  CREATE TABLE day_1 (
	    id serial NOT NULL PRIMARY KEY,
	    data text NOT NULL
	);
2023-12-04 23:22:25.083 CET [24990] ERROR:  relation "day_1" already exists
2023-12-04 23:22:25.083 CET [24990] STATEMENT:  CREATE TABLE day_1 (
	    id serial NOT NULL PRIMARY KEY,
	    data text NOT NULL
	);
2023-12-04 23:24:38.061 CET [25172] ERROR:  function substr(text, integer, integer, integer, integer, integer, integer, integer, integer, integer, integer, integer) does not exist at character 22
2023-12-04 23:24:38.061 CET [25172] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2023-12-04 23:24:38.061 CET [25172] STATEMENT:  SELECT
	    data,
	    substr(
	        data,
	        index_1,
	        index_2,
	        index_3,
	        index_4,
	        index_5,
	        index_6,
	        index_7,
	        index_8,
	        index_9,
	        LEAST(
	            index_1,
	            index_2,
	            index_3,
	            index_4,
	            index_5,
	            index_6,
	            index_7,
	            index_8,
	            index_9
	        ),
	        1
	    )
	    ||
	    substr(
	        data,
	        GREATEST(
	            index_1,
	            index_2,
	            index_3,
	            index_4,
	            index_5,
	            index_6,
	            index_7,
	            index_8,
	            index_9
	        ),
	        1
	    ) AS answer
	FROM (
	    SELECT
	        CASE    
	            WHEN position('1' in data) = 0 THEN NULL
	            ELSE position('1' in data)
	        END AS index_1,
	        CASE    
	            WHEN position('2' in data) = 0 THEN NULL
	            ELSE position('2' in data)
	        END AS index_2,
	        CASE    
	            WHEN position('3' in data) = 0 THEN NULL
	            ELSE position('3' in data)
	        END AS index_3,
	        CASE    
	            WHEN position('4' in data) = 0 THEN NULL
	            ELSE position('4' in data)
	        END AS index_4,
	        CASE    
	            WHEN position('5' in data) = 0 THEN NULL
	            ELSE position('5' in data)
	        END AS index_5,
	        CASE    
	            WHEN position('6' in data) = 0 THEN NULL
	            ELSE position('6' in data)
	        END AS index_6,
	        CASE    
	            WHEN position('7' in data) = 0 THEN NULL
	            ELSE position('7' in data)
	        END AS index_7,
	        CASE    
	            WHEN position('8' in data) = 0 THEN NULL
	            ELSE position('8' in data)
	        END AS index_8,
	        CASE    
	            WHEN position('9' in data) = 0 THEN NULL
	            ELSE position('9' in data)
	        END AS index_9,
	        data
	    FROM day_1
	) AS indexes;
2023-12-04 23:35:12.918 CET [25611] ERROR:  column "index_1" does not exist at character 22
2023-12-04 23:35:12.918 CET [25611] STATEMENT:  SELECT
	    data,
	    index_1,
	    index_2,
	    index_3,
	    index_4,
	    index_5,
	    index_6,
	    index_7,
	    index_8,
	    index_9,
	    substr(
	        data,
	        LEAST(
	            index_1,
	            index_2,
	            index_3,
	            index_4,
	            index_5,
	            index_6,
	            index_7,
	            index_8,
	            index_9
	        ),
	        1
	    ) AS leas,
	    substr(
	        data,
	        GREATEST(
	            index_1,
	            index_2,
	            index_3,
	            index_4,
	            index_5,
	            index_6,
	            index_7,
	            index_8,
	            index_9
	        ),
	        1
	    ) AS great,
	    substr(
	        data,
	        LEAST(
	            index_1_least,
	            index_2_least,
	            index_3_least,
	            index_4_least,
	            index_5_least,
	            index_6_least,
	            index_7_least,
	            index_8_least,
	            index_9_least
	        ),
	        1
	    )
	    ||
	    substr(
	        data,
	        GREATEST(
	            index_1_greater,
	            index_2_greater,
	            index_3_greater,
	            index_4_greater,
	            index_5_greater,
	            index_6_greater,
	            index_7_greater,
	            index_8_greater,
	            index_9_greater
	        ),
	        1
	    ) AS answer
	FROM (
	    SELECT
	        CASE    
	            WHEN position('1' in data) = 0 THEN NULL
	            ELSE position('1' in data)
	        END AS index_1_least,
	        CASE    
	            WHEN position('2' in data) = 0 THEN NULL
	            ELSE position('2' in data)
	        END AS index_2_least,
	        CASE    
	            WHEN position('3' in data) = 0 THEN NULL
	            ELSE position('3' in data)
	        END AS index_3_least,
	        CASE    
	            WHEN position('4' in data) = 0 THEN NULL
	            ELSE position('4' in data)
	        END AS index_4_least,
	        CASE    
	            WHEN position('5' in data) = 0 THEN NULL
	            ELSE position('5' in data)
	        END AS index_5_least,
	        CASE    
	            WHEN position('6' in data) = 0 THEN NULL
	            ELSE position('6' in data)
	        END AS index_6_least,
	        CASE    
	            WHEN position('7' in data) = 0 THEN NULL
	            ELSE position('7' in data)
	        END AS index_7_least,
	        CASE    
	            WHEN position('8' in data) = 0 THEN NULL
	            ELSE position('8' in data)
	        END AS index_8_least,
	        CASE    
	            WHEN position('9' in data) = 0 THEN NULL
	            ELSE position('9' in data)
	        END AS index_9_least,
	        CASE    
	            WHEN position('1' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('1' in REVERSE(data))
	        END AS index_1_greater,
	        CASE    
	            WHEN position('2' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('2' in REVERSE(data))
	        END AS index_2_greater,
	        CASE    
	            WHEN position('3' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('3' in REVERSE(data))
	        END AS index_3_greater,
	        CASE    
	            WHEN position('4' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('4' in REVERSE(data))
	        END AS index_4_greater,
	        CASE    
	            WHEN position('5' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('5' in REVERSE(data))
	        END AS index_5_greater,
	        CASE    
	            WHEN position('6' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('6' in REVERSE(data))
	        END AS index_6_greater,
	        CASE    
	            WHEN position('7' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('7' in REVERSE(data))
	        END AS index_7_greater,
	        CASE    
	            WHEN position('8' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('8' in REVERSE(data))
	        END AS index_8_greater,
	        CASE    
	            WHEN position('9' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('9' in REVERSE(data))
	        END AS index_9_greater,
	        data
	    FROM day_1
	) AS indexes;
2023-12-04 23:38:10.733 CET [25740] ERROR:  syntax error at or near "data" at character 1
2023-12-04 23:38:10.733 CET [25740] STATEMENT:  data
	
	
2023-12-04 23:40:15.391 CET [25947] ERROR:  relation "day_1" already exists
2023-12-04 23:40:15.391 CET [25947] STATEMENT:  CREATE TABLE day_1 (
	    id serial NOT NULL PRIMARY KEY,
	    data text NOT NULL
	);
2023-12-04 23:42:45.431 CET [26188] ERROR:  syntax error at or near "AS" at character 979
2023-12-04 23:42:45.431 CET [26188] STATEMENT:  SELECT
	    
	    SUM(
	        CAST(
	            substr(
	                data,
	                LEAST(
	                    index_1_least,
	                    index_2_least,
	                    index_3_least,
	                    index_4_least,
	                    index_5_least,
	                    index_6_least,
	                    index_7_least,
	                    index_8_least,
	                    index_9_least
	                ),
	                1
	            )
	            ||
	            substr(
	                REVERSE(data),
	                LEAST(
	                    index_1_greater,
	                    index_2_greater,
	                    index_3_greater,
	                    index_4_greater,
	                    index_5_greater,
	                    index_6_greater,
	                    index_7_greater,
	                    index_8_greater,
	                    index_9_greater
	                ),
	                1
	            )
	            AS INT            
	        ) AS answer
	    )
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	FROM (
	    SELECT
	        CASE    
	            WHEN position('1' in data) = 0 THEN NULL
	            ELSE position('1' in data)
	        END AS index_1_least,
	        CASE    
	            WHEN position('2' in data) = 0 THEN NULL
	            ELSE position('2' in data)
	        END AS index_2_least,
	        CASE    
	            WHEN position('3' in data) = 0 THEN NULL
	            ELSE position('3' in data)
	        END AS index_3_least,
	        CASE    
	            WHEN position('4' in data) = 0 THEN NULL
	            ELSE position('4' in data)
	        END AS index_4_least,
	        CASE    
	            WHEN position('5' in data) = 0 THEN NULL
	            ELSE position('5' in data)
	        END AS index_5_least,
	        CASE    
	            WHEN position('6' in data) = 0 THEN NULL
	            ELSE position('6' in data)
	        END AS index_6_least,
	        CASE    
	            WHEN position('7' in data) = 0 THEN NULL
	            ELSE position('7' in data)
	        END AS index_7_least,
	        CASE    
	            WHEN position('8' in data) = 0 THEN NULL
	            ELSE position('8' in data)
	        END AS index_8_least,
	        CASE    
	            WHEN position('9' in data) = 0 THEN NULL
	            ELSE position('9' in data)
	        END AS index_9_least,
	        CASE    
	            WHEN position('1' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('1' in REVERSE(data))
	        END AS index_1_greater,
	        CASE    
	            WHEN position('2' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('2' in REVERSE(data))
	        END AS index_2_greater,
	        CASE    
	            WHEN position('3' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('3' in REVERSE(data))
	        END AS index_3_greater,
	        CASE    
	            WHEN position('4' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('4' in REVERSE(data))
	        END AS index_4_greater,
	        CASE    
	            WHEN position('5' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('5' in REVERSE(data))
	        END AS index_5_greater,
	        CASE    
	            WHEN position('6' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('6' in REVERSE(data))
	        END AS index_6_greater,
	        CASE    
	            WHEN position('7' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('7' in REVERSE(data))
	        END AS index_7_greater,
	        CASE    
	            WHEN position('8' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('8' in REVERSE(data))
	        END AS index_8_greater,
	        CASE    
	            WHEN position('9' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('9' in REVERSE(data))
	        END AS index_9_greater,
	        data
	    FROM day_1
	) AS indexes;
2023-12-05 00:07:06.148 CET [26899] ERROR:  syntax error at or near "THEN" at character 2462
2023-12-05 00:07:06.148 CET [26899] STATEMENT:  SELECT
	    SUM(
	        CAST(
	            substr(
	                data,
	                LEAST(
	                    index_1_least,
	                    index_2_least,
	                    index_3_least,
	                    index_4_least,
	                    index_5_least,
	                    index_6_least,
	                    index_7_least,
	                    index_8_least,
	                    index_9_least
	                ),
	                1
	            )
	            ||
	            substr(
	                REVERSE(data),
	                LEAST(
	                    index_1_greater,
	                    index_2_greater,
	                    index_3_greater,
	                    index_4_greater,
	                    index_5_greater,
	                    index_6_greater,
	                    index_7_greater,
	                    index_8_greater,
	                    index_9_greater
	                ),
	                1
	            )
	            AS INT            
	        )
	    ) AS answer
	FROM (
	    SELECT
	        
	        
	        CASE    
	            WHEN position('1' in data) = 0 THEN NULL
	            ELSE position('1' in data)
	        END AS index_1_least_number,
	        CASE    
	            WHEN position('2' in data) = 0 THEN NULL
	            ELSE position('2' in data)
	        END AS index_2_least_number,
	        CASE    
	            WHEN position('3' in data) = 0 THEN NULL
	            ELSE position('3' in data)
	        END AS index_3_least_number,
	        CASE    
	            WHEN position('4' in data) = 0 THEN NULL
	            ELSE position('4' in data)
	        END AS index_4_least_number,
	        CASE    
	            WHEN position('5' in data) = 0 THEN NULL
	            ELSE position('5' in data)
	        END AS index_5_least_number,
	        CASE    
	            WHEN position('6' in data) = 0 THEN NULL
	            ELSE position('6' in data)
	        END AS index_6_least_number,
	        CASE    
	            WHEN position('7' in data) = 0 THEN NULL
	            ELSE position('7' in data)
	        END AS index_7_least_number,
	        CASE    
	            WHEN position('8' in data) = 0 THEN NULL
	            ELSE position('8' in data)
	        END AS index_8_least_number,
	        CASE    
	            WHEN position('9' in data) = 0 THEN NULL
	            ELSE position('9' in data)
	        END AS index_9_least_number,
	        
	        CASE    
	            WHEN position('one' in data) = 0 THEN NULL
	            ELSE position('one' in data) THEN '1'
	        END AS index_1_least_letter,
	        CASE    
	            WHEN position('two' in data) = 0 THEN NULL
	            ELSE position('two' in data) THEN '2'
	        END AS index_2_least_letter,
	        CASE    
	            WHEN position('three' in data) = 0 THEN NULL
	            ELSE position('three' in data) THEN '3'
	        END AS index_3_least_letter,
	        CASE    
	            WHEN position('four' in data) = 0 THEN NULL
	            ELSE position('four' in data) THEN '4'
	        END AS index_4_least_letter,
	        CASE    
	            WHEN position('five' in data) = 0 THEN NULL
	            ELSE position('five' in data) THEN '5'
	        END AS index_5_least_letter,
	        CASE    
	            WHEN position('six' in data) = 0 THEN NULL
	            ELSE position('six' in data) THEN '6'
	        END AS index_6_least_letter,
	        CASE    
	            WHEN position('seven' in data) = 0 THEN NULL
	            ELSE position('seven' in data) THEN '7'
	        END AS index_7_least_letter,
	        CASE    
	            WHEN position('eight' in data) = 0 THEN NULL
	            ELSE position('eight' in data) THEN '8'
	        END AS index_8_least_letter,
	        CASE    
	            WHEN position('nine' in data) = 0 THEN NULL
	            ELSE position('nine' in data) THEN '9'
	        END AS index_9_least_letter,
	        
	        
	        CASE    
	            WHEN position('1' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('1' in REVERSE(data))
	        END AS index_1_greater_number,
	        CASE    
	            WHEN position('2' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('2' in REVERSE(data))
	        END AS index_2_greater_number,
	        CASE    
	            WHEN position('3' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('3' in REVERSE(data))
	        END AS index_3_greater_number,
	        CASE    
	            WHEN position('4' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('4' in REVERSE(data))
	        END AS index_4_greater_number,
	        CASE    
	            WHEN position('5' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('5' in REVERSE(data))
	        END AS index_5_greater_number,
	        CASE    
	            WHEN position('6' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('6' in REVERSE(data))
	        END AS index_6_greater_number,
	        CASE    
	            WHEN position('7' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('7' in REVERSE(data))
	        END AS index_7_greater_number,
	        CASE    
	            WHEN position('8' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('8' in REVERSE(data))
	        END AS index_8_greater_number,
	        CASE    
	            WHEN position('9' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('9' in REVERSE(data))
	        END AS index_9_greater_number,
	        
	        CASE    
	            WHEN position('one' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('one' in REVERSE(data)) THEN '1'
	        END AS index_1_greater_letter,
	        CASE    
	            WHEN position('two' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('two' in REVERSE(data)) THEN '2'
	        END AS index_2_greater_letter,
	        CASE    
	            WHEN position('three' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('three' in REVERSE(data)) THEN '3'
	        END AS index_3_greater_letter,
	        CASE    
	            WHEN position('four' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('four' in REVERSE(data)) THEN '4'
	        END AS index_4_greater_letter,
	        CASE    
	            WHEN position('five' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('five' in REVERSE(data)) THEN '5'
	        END AS index_5_greater_letter,
	        CASE    
	            WHEN position('six' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('six' in REVERSE(data)) THEN '6'
	        END AS index_6_greater_letter,
	        CASE    
	            WHEN position('seven' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('seven' in REVERSE(data)) THEN '7'
	        END AS index_7_greater_letter,
	        CASE    
	            WHEN position('eight' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('eight' in REVERSE(data)) THEN '8'
	        END AS index_8_greater_letter,
	        CASE    
	            WHEN position('nine' in REVERSE(data)) = 0 THEN NULL
	            ELSE position('nine' in REVERSE(data)) THEN '9'
	        END AS index_9_greater_letter,
	        
	        data
	    FROM day_1
	) AS indexes;
2023-12-05 00:11:34.802 CET [27000] ERROR:  column "index_1_least" does not exist at character 116
2023-12-05 00:11:34.802 CET [27000] STATEMENT:  SELECT
	    SUM(
	        CAST(
	            substr(
	                data,
	                LEAST(
	                    index_1_least,
	                    index_2_least,
	                    index_3_least,
	                    index_4_least,
	                    index_5_least,
	                    index_6_least,
	                    index_7_least,
	                    index_8_least,
	                    index_9_least
	                ),
	                1
	            )
	            ||
	            substr(
	                REVERSE(data),
	                LEAST(
	                    index_1_greater,
	                    index_2_greater,
	                    index_3_greater,
	                    index_4_greater,
	                    index_5_greater,
	                    index_6_greater,
	                    index_7_greater,
	                    index_8_greater,
	                    index_9_greater
	                ),
	                1
	            )
	            AS INT            
	        )
	    ) AS answer
	FROM (
	    SELECT
	        
	        
	        CASE    
	            WHEN position('1' in data) = 0 
	            THEN NULL
	            ELSE position('1' in data)
	        END AS index_1_least_number,
	        CASE    
	            WHEN position('2' in data) = 0 
	            THEN NULL
	            ELSE position('2' in data)
	        END AS index_2_least_number,
	        CASE    
	            WHEN position('3' in data) = 0 
	            THEN NULL
	            ELSE position('3' in data)
	        END AS index_3_least_number,
	        CASE    
	            WHEN position('4' in data) = 0 
	            THEN NULL
	            ELSE position('4' in data)
	        END AS index_4_least_number,
	        CASE    
	            WHEN position('5' in data) = 0 
	            THEN NULL
	            ELSE position('5' in data)
	        END AS index_5_least_number,
	        CASE    
	            WHEN position('6' in data) = 0 
	            THEN NULL
	            ELSE position('6' in data)
	        END AS index_6_least_number,
	        CASE    
	            WHEN position('7' in data) = 0 
	            THEN NULL
	            ELSE position('7' in data)
	        END AS index_7_least_number,
	        CASE    
	            WHEN position('8' in data) = 0 
	            THEN NULL
	            ELSE position('8' in data)
	        END AS index_8_least_number,
	        CASE    
	            WHEN position('9' in data) = 0 
	            THEN NULL
	            ELSE position('9' in data)
	        END AS index_9_least_number,
	        
	        CASE    
	            WHEN position('one' in data) = 0 
	            THEN NULL
	            ELSE '1'
	        END AS index_1_least_letter,
	        CASE    
	            WHEN position('two' in data) = 0 
	            THEN NULL
	            ELSE '2'
	        END AS index_2_least_letter,
	        CASE    
	            WHEN position('three' in data) = 0 
	            THEN NULL
	            ELSE '3'
	        END AS index_3_least_letter,
	        CASE    
	            WHEN position('four' in data) = 0 
	            THEN NULL
	            ELSE '4'
	        END AS index_4_least_letter,
	        CASE    
	            WHEN position('five' in data) = 0 
	            THEN NULL
	            ELSE '5'
	        END AS index_5_least_letter,
	        CASE    
	            WHEN position('six' in data) = 0 
	            THEN NULL
	            ELSE '6'
	        END AS index_6_least_letter,
	        CASE    
	            WHEN position('seven' in data) = 0 
	            THEN NULL
	            ELSE '7'
	        END AS index_7_least_letter,
	        CASE    
	            WHEN position('eight' in data) = 0 
	            THEN NULL
	            ELSE '8'
	        END AS index_8_least_letter,
	        CASE    
	            WHEN position('nine' in data) = 0 
	            THEN NULL
	            ELSE '9'
	        END AS index_9_least_letter,
	        
	        
	        CASE    
	            WHEN position('1' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('1' in REVERSE(data))
	        END AS index_1_greater_number,
	        CASE    
	            WHEN position('2' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('2' in REVERSE(data))
	        END AS index_2_greater_number,
	        CASE    
	            WHEN position('3' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('3' in REVERSE(data))
	        END AS index_3_greater_number,
	        CASE    
	            WHEN position('4' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('4' in REVERSE(data))
	        END AS index_4_greater_number,
	        CASE    
	            WHEN position('5' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('5' in REVERSE(data))
	        END AS index_5_greater_number,
	        CASE    
	            WHEN position('6' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('6' in REVERSE(data))
	        END AS index_6_greater_number,
	        CASE    
	            WHEN position('7' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('7' in REVERSE(data))
	        END AS index_7_greater_number,
	        CASE    
	            WHEN position('8' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('8' in REVERSE(data))
	        END AS index_8_greater_number,
	        CASE    
	            WHEN position('9' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('9' in REVERSE(data))
	        END AS index_9_greater_number,
	        
	        CASE    
	            WHEN position('one' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE '1'
	        END AS index_1_greater_letter,
	        CASE    
	            WHEN position('two' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE '2'
	        END AS index_2_greater_letter,
	        CASE    
	            WHEN position('three' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE '3'
	        END AS index_3_greater_letter,
	        CASE    
	            WHEN position('four' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE '4'
	        END AS index_4_greater_letter,
	        CASE    
	            WHEN position('five' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE '5'
	        END AS index_5_greater_letter,
	        CASE    
	            WHEN position('six' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE '6'
	        END AS index_6_greater_letter,
	        CASE    
	            WHEN position('seven' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE '7'
	        END AS index_7_greater_letter,
	        CASE    
	            WHEN position('eight' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE '8'
	        END AS index_8_greater_letter,
	        CASE    
	            WHEN position('nine' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE '9'
	        END AS index_9_greater_letter,
	        
	        data
	    FROM day_1
	) AS indexes;
2023-12-05 00:16:47.359 CET [27094] ERROR:  syntax error at or near "index_9_leas_letter" at character 1324
2023-12-05 00:16:47.359 CET [27094] STATEMENT:  SELECT
	    SUM(
	        CAST(
	            substr(
	                data,
	                LEAST(
	                    LEAST(
	                        index_1_least_number,
	                        index_1_least_letter    
	                    ),
	                    LEAST(
	                        index_2_least_number,
	                        index_2_least_letter
	                    ),
	                    LEAST(
	                        index_3_least_number,
	                        index_3_least_letter
	                    ),
	                    LEAST(
	                        index_4_least_number,
	                        index_4_least_letter
	                    ),
	                    LEAST(
	                        index_5_least_number,
	                        index_5_least_letter
	                    ),
	                    LEAST(
	                        index_6_least_number,
	                        index_6_least_letter
	                    ),
	                    LEAST(
	                        index_7_least_number,
	                        index_7_least_letter
	                    ),
	                    LEAST(
	                        index_8_least_number,
	                        index_8_least_letter
	                    ),
	                    LEAST(
	                        index_9_leas_numbert
	                        index_9_leas_letter
	                    )
	                ),
	                1
	            )
	            ||
	            substr(
	                REVERSE(data),
	                LEAST(
	                    LEAST(
	                        index_1_greater_number,
	                        index_1_greater_letter
	                    ),
	                    LEAST(
	                        index_2_greater_number,
	                        index_2_greater_letter
	                    ),
	                    LEAST(
	                        index_3_greater_number,
	                        index_3_greater_letter
	                    ),
	                    LEAST(
	                        index_4_greater_number,
	                        index_4_greater_letter
	                    ),
	                    LEAST(
	                        index_5_greater_number,
	                        index_5_greater_letter
	                    ),
	                    LEAST(
	                        index_6_greater_number,
	                        index_6_greater_letter
	                    ),
	                    LEAST(
	                        index_7_greater_number,
	                        index_7_greater_letter
	                    ),
	                    LEAST(
	                        index_8_greater_number,
	                        index_8_greater_letter
	                    ),
	                    LEAST(
	                        index_9_greater_number,
	                        index_9_greater_letter
	                    )
	                ),
	                1
	            )
	            AS INT            
	        )
	    ) AS answer
	FROM (
	    SELECT
	        
	        
	        CASE    
	            WHEN position('1' in data) = 0 
	            THEN NULL
	            ELSE position('1' in data)
	        END AS index_1_least_number,
	        CASE    
	            WHEN position('2' in data) = 0 
	            THEN NULL
	            ELSE position('2' in data)
	        END AS index_2_least_number,
	        CASE    
	            WHEN position('3' in data) = 0 
	            THEN NULL
	            ELSE position('3' in data)
	        END AS index_3_least_number,
	        CASE    
	            WHEN position('4' in data) = 0 
	            THEN NULL
	            ELSE position('4' in data)
	        END AS index_4_least_number,
	        CASE    
	            WHEN position('5' in data) = 0 
	            THEN NULL
	            ELSE position('5' in data)
	        END AS index_5_least_number,
	        CASE    
	            WHEN position('6' in data) = 0 
	            THEN NULL
	            ELSE position('6' in data)
	        END AS index_6_least_number,
	        CASE    
	            WHEN position('7' in data) = 0 
	            THEN NULL
	            ELSE position('7' in data)
	        END AS index_7_least_number,
	        CASE    
	            WHEN position('8' in data) = 0 
	            THEN NULL
	            ELSE position('8' in data)
	        END AS index_8_least_number,
	        CASE    
	            WHEN position('9' in data) = 0 
	            THEN NULL
	            ELSE position('9' in data)
	        END AS index_9_least_number,
	        
	        CASE    
	            WHEN position('one' in data) = 0 
	            THEN NULL
	            ELSE position('one' in data)
	        END AS index_1_least_letter,
	        CASE    
	            WHEN position('two' in data) = 0 
	            THEN NULL
	            ELSE position('two' in data)
	        END AS index_2_least_letter,
	        CASE    
	            WHEN position('three' in data) = 0 
	            THEN NULL
	            ELSE position('three' in data)
	        END AS index_3_least_letter,
	        CASE    
	            WHEN position('four' in data) = 0 
	            THEN NULL
	            ELSE position('four' in data)
	        END AS index_4_least_letter,
	        CASE    
	            WHEN position('five' in data) = 0 
	            THEN NULL
	            ELSE position('five' in data)
	        END AS index_5_least_letter,
	        CASE    
	            WHEN position('six' in data) = 0 
	            THEN NULL
	            ELSE position('six' in data)
	        END AS index_6_least_letter,
	        CASE    
	            WHEN position('seven' in data) = 0 
	            THEN NULL
	            ELSE position('seven' in data)
	        END AS index_7_least_letter,
	        CASE    
	            WHEN position('eight' in data) = 0 
	            THEN NULL
	            ELSE position('eight' in data)
	        END AS index_8_least_letter,
	        CASE    
	            WHEN position('nine' in data) = 0 
	            THEN NULL
	            ELSE position('nine' in data)
	        END AS index_9_least_letter,
	        
	        
	        CASE    
	            WHEN position('1' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('1' in REVERSE(data))
	        END AS index_1_greater_number,
	        CASE    
	            WHEN position('2' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('2' in REVERSE(data))
	        END AS index_2_greater_number,
	        CASE    
	            WHEN position('3' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('3' in REVERSE(data))
	        END AS index_3_greater_number,
	        CASE    
	            WHEN position('4' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('4' in REVERSE(data))
	        END AS index_4_greater_number,
	        CASE    
	            WHEN position('5' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('5' in REVERSE(data))
	        END AS index_5_greater_number,
	        CASE    
	            WHEN position('6' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('6' in REVERSE(data))
	        END AS index_6_greater_number,
	        CASE    
	            WHEN position('7' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('7' in REVERSE(data))
	        END AS index_7_greater_number,
	        CASE    
	            WHEN position('8' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('8' in REVERSE(data))
	        END AS index_8_greater_number,
	        CASE    
	            WHEN position('9' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('9' in REVERSE(data))
	        END AS index_9_greater_number,
	        
	        CASE    
	            WHEN position('one' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('one' in REVERSE(data))
	        END AS index_1_greater_letter,
	        CASE    
	            WHEN position('two' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('two' in REVERSE(data))
	        END AS index_2_greater_letter,
	        CASE    
	            WHEN position('three' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('three' in REVERSE(data))
	        END AS index_3_greater_letter,
	        CASE    
	            WHEN position('four' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('four' in REVERSE(data))
	        END AS index_4_greater_letter,
	        CASE    
	            WHEN position('five' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('five' in REVERSE(data))
	        END AS index_5_greater_letter,
	        CASE    
	            WHEN position('six' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('six' in REVERSE(data))
	        END AS index_6_greater_letter,
	        CASE    
	            WHEN position('seven' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('seven' in REVERSE(data))
	        END AS index_7_greater_letter,
	        CASE    
	            WHEN position('eight' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('eight' in REVERSE(data))
	        END AS index_8_greater_letter,
	        CASE    
	            WHEN position('nine' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('nine' in REVERSE(data))
	        END AS index_9_greater_letter,
	        
	        data
	    FROM day_1
	) AS indexes;
2023-12-05 00:17:01.094 CET [27132] ERROR:  syntax error at or near "index_9_least_letter" at character 1325
2023-12-05 00:17:01.094 CET [27132] STATEMENT:  SELECT
	    SUM(
	        CAST(
	            substr(
	                data,
	                LEAST(
	                    LEAST(
	                        index_1_least_number,
	                        index_1_least_letter    
	                    ),
	                    LEAST(
	                        index_2_least_number,
	                        index_2_least_letter
	                    ),
	                    LEAST(
	                        index_3_least_number,
	                        index_3_least_letter
	                    ),
	                    LEAST(
	                        index_4_least_number,
	                        index_4_least_letter
	                    ),
	                    LEAST(
	                        index_5_least_number,
	                        index_5_least_letter
	                    ),
	                    LEAST(
	                        index_6_least_number,
	                        index_6_least_letter
	                    ),
	                    LEAST(
	                        index_7_least_number,
	                        index_7_least_letter
	                    ),
	                    LEAST(
	                        index_8_least_number,
	                        index_8_least_letter
	                    ),
	                    LEAST(
	                        index_9_least_numbert
	                        index_9_least_letter
	                    )
	                ),
	                1
	            )
	            ||
	            substr(
	                REVERSE(data),
	                LEAST(
	                    LEAST(
	                        index_1_greater_number,
	                        index_1_greater_letter
	                    ),
	                    LEAST(
	                        index_2_greater_number,
	                        index_2_greater_letter
	                    ),
	                    LEAST(
	                        index_3_greater_number,
	                        index_3_greater_letter
	                    ),
	                    LEAST(
	                        index_4_greater_number,
	                        index_4_greater_letter
	                    ),
	                    LEAST(
	                        index_5_greater_number,
	                        index_5_greater_letter
	                    ),
	                    LEAST(
	                        index_6_greater_number,
	                        index_6_greater_letter
	                    ),
	                    LEAST(
	                        index_7_greater_number,
	                        index_7_greater_letter
	                    ),
	                    LEAST(
	                        index_8_greater_number,
	                        index_8_greater_letter
	                    ),
	                    LEAST(
	                        index_9_greater_number,
	                        index_9_greater_letter
	                    )
	                ),
	                1
	            )
	            AS INT            
	        )
	    ) AS answer
	FROM (
	    SELECT
	        
	        
	        CASE    
	            WHEN position('1' in data) = 0 
	            THEN NULL
	            ELSE position('1' in data)
	        END AS index_1_least_number,
	        CASE    
	            WHEN position('2' in data) = 0 
	            THEN NULL
	            ELSE position('2' in data)
	        END AS index_2_least_number,
	        CASE    
	            WHEN position('3' in data) = 0 
	            THEN NULL
	            ELSE position('3' in data)
	        END AS index_3_least_number,
	        CASE    
	            WHEN position('4' in data) = 0 
	            THEN NULL
	            ELSE position('4' in data)
	        END AS index_4_least_number,
	        CASE    
	            WHEN position('5' in data) = 0 
	            THEN NULL
	            ELSE position('5' in data)
	        END AS index_5_least_number,
	        CASE    
	            WHEN position('6' in data) = 0 
	            THEN NULL
	            ELSE position('6' in data)
	        END AS index_6_least_number,
	        CASE    
	            WHEN position('7' in data) = 0 
	            THEN NULL
	            ELSE position('7' in data)
	        END AS index_7_least_number,
	        CASE    
	            WHEN position('8' in data) = 0 
	            THEN NULL
	            ELSE position('8' in data)
	        END AS index_8_least_number,
	        CASE    
	            WHEN position('9' in data) = 0 
	            THEN NULL
	            ELSE position('9' in data)
	        END AS index_9_least_number,
	        
	        CASE    
	            WHEN position('one' in data) = 0 
	            THEN NULL
	            ELSE position('one' in data)
	        END AS index_1_least_letter,
	        CASE    
	            WHEN position('two' in data) = 0 
	            THEN NULL
	            ELSE position('two' in data)
	        END AS index_2_least_letter,
	        CASE    
	            WHEN position('three' in data) = 0 
	            THEN NULL
	            ELSE position('three' in data)
	        END AS index_3_least_letter,
	        CASE    
	            WHEN position('four' in data) = 0 
	            THEN NULL
	            ELSE position('four' in data)
	        END AS index_4_least_letter,
	        CASE    
	            WHEN position('five' in data) = 0 
	            THEN NULL
	            ELSE position('five' in data)
	        END AS index_5_least_letter,
	        CASE    
	            WHEN position('six' in data) = 0 
	            THEN NULL
	            ELSE position('six' in data)
	        END AS index_6_least_letter,
	        CASE    
	            WHEN position('seven' in data) = 0 
	            THEN NULL
	            ELSE position('seven' in data)
	        END AS index_7_least_letter,
	        CASE    
	            WHEN position('eight' in data) = 0 
	            THEN NULL
	            ELSE position('eight' in data)
	        END AS index_8_least_letter,
	        CASE    
	            WHEN position('nine' in data) = 0 
	            THEN NULL
	            ELSE position('nine' in data)
	        END AS index_9_least_letter,
	        
	        
	        CASE    
	            WHEN position('1' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('1' in REVERSE(data))
	        END AS index_1_greater_number,
	        CASE    
	            WHEN position('2' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('2' in REVERSE(data))
	        END AS index_2_greater_number,
	        CASE    
	            WHEN position('3' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('3' in REVERSE(data))
	        END AS index_3_greater_number,
	        CASE    
	            WHEN position('4' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('4' in REVERSE(data))
	        END AS index_4_greater_number,
	        CASE    
	            WHEN position('5' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('5' in REVERSE(data))
	        END AS index_5_greater_number,
	        CASE    
	            WHEN position('6' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('6' in REVERSE(data))
	        END AS index_6_greater_number,
	        CASE    
	            WHEN position('7' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('7' in REVERSE(data))
	        END AS index_7_greater_number,
	        CASE    
	            WHEN position('8' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('8' in REVERSE(data))
	        END AS index_8_greater_number,
	        CASE    
	            WHEN position('9' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('9' in REVERSE(data))
	        END AS index_9_greater_number,
	        
	        CASE    
	            WHEN position('one' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('one' in REVERSE(data))
	        END AS index_1_greater_letter,
	        CASE    
	            WHEN position('two' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('two' in REVERSE(data))
	        END AS index_2_greater_letter,
	        CASE    
	            WHEN position('three' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('three' in REVERSE(data))
	        END AS index_3_greater_letter,
	        CASE    
	            WHEN position('four' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('four' in REVERSE(data))
	        END AS index_4_greater_letter,
	        CASE    
	            WHEN position('five' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('five' in REVERSE(data))
	        END AS index_5_greater_letter,
	        CASE    
	            WHEN position('six' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('six' in REVERSE(data))
	        END AS index_6_greater_letter,
	        CASE    
	            WHEN position('seven' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('seven' in REVERSE(data))
	        END AS index_7_greater_letter,
	        CASE    
	            WHEN position('eight' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('eight' in REVERSE(data))
	        END AS index_8_greater_letter,
	        CASE    
	            WHEN position('nine' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('nine' in REVERSE(data))
	        END AS index_9_greater_letter,
	        
	        data
	    FROM day_1
	) AS indexes;
2023-12-05 00:17:14.091 CET [27176] ERROR:  invalid input syntax for type integer: "t1"
2023-12-05 00:17:14.091 CET [27176] STATEMENT:  SELECT
	    SUM(
	        CAST(
	            substr(
	                data,
	                LEAST(
	                    LEAST(
	                        index_1_least_number,
	                        index_1_least_letter    
	                    ),
	                    LEAST(
	                        index_2_least_number,
	                        index_2_least_letter
	                    ),
	                    LEAST(
	                        index_3_least_number,
	                        index_3_least_letter
	                    ),
	                    LEAST(
	                        index_4_least_number,
	                        index_4_least_letter
	                    ),
	                    LEAST(
	                        index_5_least_number,
	                        index_5_least_letter
	                    ),
	                    LEAST(
	                        index_6_least_number,
	                        index_6_least_letter
	                    ),
	                    LEAST(
	                        index_7_least_number,
	                        index_7_least_letter
	                    ),
	                    LEAST(
	                        index_8_least_number,
	                        index_8_least_letter
	                    ),
	                    LEAST(
	                        index_9_least_number,
	                        index_9_least_letter
	                    )
	                ),
	                1
	            )
	            ||
	            substr(
	                REVERSE(data),
	                LEAST(
	                    LEAST(
	                        index_1_greater_number,
	                        index_1_greater_letter
	                    ),
	                    LEAST(
	                        index_2_greater_number,
	                        index_2_greater_letter
	                    ),
	                    LEAST(
	                        index_3_greater_number,
	                        index_3_greater_letter
	                    ),
	                    LEAST(
	                        index_4_greater_number,
	                        index_4_greater_letter
	                    ),
	                    LEAST(
	                        index_5_greater_number,
	                        index_5_greater_letter
	                    ),
	                    LEAST(
	                        index_6_greater_number,
	                        index_6_greater_letter
	                    ),
	                    LEAST(
	                        index_7_greater_number,
	                        index_7_greater_letter
	                    ),
	                    LEAST(
	                        index_8_greater_number,
	                        index_8_greater_letter
	                    ),
	                    LEAST(
	                        index_9_greater_number,
	                        index_9_greater_letter
	                    )
	                ),
	                1
	            )
	            AS INT            
	        )
	    ) AS answer
	FROM (
	    SELECT
	        
	        
	        CASE    
	            WHEN position('1' in data) = 0 
	            THEN NULL
	            ELSE position('1' in data)
	        END AS index_1_least_number,
	        CASE    
	            WHEN position('2' in data) = 0 
	            THEN NULL
	            ELSE position('2' in data)
	        END AS index_2_least_number,
	        CASE    
	            WHEN position('3' in data) = 0 
	            THEN NULL
	            ELSE position('3' in data)
	        END AS index_3_least_number,
	        CASE    
	            WHEN position('4' in data) = 0 
	            THEN NULL
	            ELSE position('4' in data)
	        END AS index_4_least_number,
	        CASE    
	            WHEN position('5' in data) = 0 
	            THEN NULL
	            ELSE position('5' in data)
	        END AS index_5_least_number,
	        CASE    
	            WHEN position('6' in data) = 0 
	            THEN NULL
	            ELSE position('6' in data)
	        END AS index_6_least_number,
	        CASE    
	            WHEN position('7' in data) = 0 
	            THEN NULL
	            ELSE position('7' in data)
	        END AS index_7_least_number,
	        CASE    
	            WHEN position('8' in data) = 0 
	            THEN NULL
	            ELSE position('8' in data)
	        END AS index_8_least_number,
	        CASE    
	            WHEN position('9' in data) = 0 
	            THEN NULL
	            ELSE position('9' in data)
	        END AS index_9_least_number,
	        
	        CASE    
	            WHEN position('one' in data) = 0 
	            THEN NULL
	            ELSE position('one' in data)
	        END AS index_1_least_letter,
	        CASE    
	            WHEN position('two' in data) = 0 
	            THEN NULL
	            ELSE position('two' in data)
	        END AS index_2_least_letter,
	        CASE    
	            WHEN position('three' in data) = 0 
	            THEN NULL
	            ELSE position('three' in data)
	        END AS index_3_least_letter,
	        CASE    
	            WHEN position('four' in data) = 0 
	            THEN NULL
	            ELSE position('four' in data)
	        END AS index_4_least_letter,
	        CASE    
	            WHEN position('five' in data) = 0 
	            THEN NULL
	            ELSE position('five' in data)
	        END AS index_5_least_letter,
	        CASE    
	            WHEN position('six' in data) = 0 
	            THEN NULL
	            ELSE position('six' in data)
	        END AS index_6_least_letter,
	        CASE    
	            WHEN position('seven' in data) = 0 
	            THEN NULL
	            ELSE position('seven' in data)
	        END AS index_7_least_letter,
	        CASE    
	            WHEN position('eight' in data) = 0 
	            THEN NULL
	            ELSE position('eight' in data)
	        END AS index_8_least_letter,
	        CASE    
	            WHEN position('nine' in data) = 0 
	            THEN NULL
	            ELSE position('nine' in data)
	        END AS index_9_least_letter,
	        
	        
	        CASE    
	            WHEN position('1' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('1' in REVERSE(data))
	        END AS index_1_greater_number,
	        CASE    
	            WHEN position('2' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('2' in REVERSE(data))
	        END AS index_2_greater_number,
	        CASE    
	            WHEN position('3' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('3' in REVERSE(data))
	        END AS index_3_greater_number,
	        CASE    
	            WHEN position('4' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('4' in REVERSE(data))
	        END AS index_4_greater_number,
	        CASE    
	            WHEN position('5' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('5' in REVERSE(data))
	        END AS index_5_greater_number,
	        CASE    
	            WHEN position('6' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('6' in REVERSE(data))
	        END AS index_6_greater_number,
	        CASE    
	            WHEN position('7' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('7' in REVERSE(data))
	        END AS index_7_greater_number,
	        CASE    
	            WHEN position('8' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('8' in REVERSE(data))
	        END AS index_8_greater_number,
	        CASE    
	            WHEN position('9' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('9' in REVERSE(data))
	        END AS index_9_greater_number,
	        
	        CASE    
	            WHEN position('one' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('one' in REVERSE(data))
	        END AS index_1_greater_letter,
	        CASE    
	            WHEN position('two' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('two' in REVERSE(data))
	        END AS index_2_greater_letter,
	        CASE    
	            WHEN position('three' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('three' in REVERSE(data))
	        END AS index_3_greater_letter,
	        CASE    
	            WHEN position('four' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('four' in REVERSE(data))
	        END AS index_4_greater_letter,
	        CASE    
	            WHEN position('five' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('five' in REVERSE(data))
	        END AS index_5_greater_letter,
	        CASE    
	            WHEN position('six' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('six' in REVERSE(data))
	        END AS index_6_greater_letter,
	        CASE    
	            WHEN position('seven' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('seven' in REVERSE(data))
	        END AS index_7_greater_letter,
	        CASE    
	            WHEN position('eight' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('eight' in REVERSE(data))
	        END AS index_8_greater_letter,
	        CASE    
	            WHEN position('nine' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('nine' in REVERSE(data))
	        END AS index_9_greater_letter,
	        
	        data
	    FROM day_1
	) AS indexes;
2023-12-05 00:24:02.201 CET [27327] ERROR:  syntax error at or near "CASE" at character 2364
2023-12-05 00:24:02.201 CET [27327] STATEMENT:  SELECT
	    data,
	    substr(
	        data,
	        LEAST(
	            
	            
	            
	            
	            index_1_least,
	            LEAST(
	                index_2_least_number,
	                index_2_least_letter
	            ),
	            LEAST(
	                index_3_least_number,
	                index_3_least_letter
	            ),
	            LEAST(
	                index_4_least_number,
	                index_4_least_letter
	            ),
	            LEAST(
	                index_5_least_number,
	                index_5_least_letter
	            ),
	            LEAST(
	                index_6_least_number,
	                index_6_least_letter
	            ),
	            LEAST(
	                index_7_least_number,
	                index_7_least_letter
	            ),
	            LEAST(
	                index_8_least_number,
	                index_8_least_letter
	            ),
	            LEAST(
	                index_9_least_number,
	                index_9_least_letter
	            )
	        ),
	        1
	    )
	    ||
	    substr(
	        REVERSE(data),
	        LEAST(
	            LEAST(
	                index_1_greater_number,
	                index_1_greater_letter
	            ),
	            LEAST(
	                index_2_greater_number,
	                index_2_greater_letter
	            ),
	            LEAST(
	                index_3_greater_number,
	                index_3_greater_letter
	            ),
	            LEAST(
	                index_4_greater_number,
	                index_4_greater_letter
	            ),
	            LEAST(
	                index_5_greater_number,
	                index_5_greater_letter
	            ),
	            LEAST(
	                index_6_greater_number,
	                index_6_greater_letter
	            ),
	            LEAST(
	                index_7_greater_number,
	                index_7_greater_letter
	            ),
	            LEAST(
	                index_8_greater_number,
	                index_8_greater_letter
	            ),
	            LEAST(
	                index_9_greater_number,
	                index_9_greater_letter
	            )
	        ),
	        1
	    ) AS answer
	FROM (
	    SELECT
	        
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in data) = 0 
	                THEN NULL
	                ELSE position('1' in data)
	            END 
	            CASE    
	                WHEN position('one' in data) = 0 
	                THEN NULL
	                ELSE position('one' in data)
	            END 
	        ) AS index_1_least
	        
	        
	        
	        
	        
	        CASE    
	            WHEN position('2' in data) = 0 
	            THEN NULL
	            ELSE position('2' in data)
	        END AS index_2_least_number,
	        CASE    
	            WHEN position('3' in data) = 0 
	            THEN NULL
	            ELSE position('3' in data)
	        END AS index_3_least_number,
	        CASE    
	            WHEN position('4' in data) = 0 
	            THEN NULL
	            ELSE position('4' in data)
	        END AS index_4_least_number,
	        CASE    
	            WHEN position('5' in data) = 0 
	            THEN NULL
	            ELSE position('5' in data)
	        END AS index_5_least_number,
	        CASE    
	            WHEN position('6' in data) = 0 
	            THEN NULL
	            ELSE position('6' in data)
	        END AS index_6_least_number,
	        CASE    
	            WHEN position('7' in data) = 0 
	            THEN NULL
	            ELSE position('7' in data)
	        END AS index_7_least_number,
	        CASE    
	            WHEN position('8' in data) = 0 
	            THEN NULL
	            ELSE position('8' in data)
	        END AS index_8_least_number,
	        CASE    
	            WHEN position('9' in data) = 0 
	            THEN NULL
	            ELSE position('9' in data)
	        END AS index_9_least_number,
	        
	        
	        
	        
	        
	        
	        CASE    
	            WHEN position('two' in data) = 0 
	            THEN NULL
	            ELSE position('two' in data)
	        END AS index_2_least_letter,
	        CASE    
	            WHEN position('three' in data) = 0 
	            THEN NULL
	            ELSE position('three' in data)
	        END AS index_3_least_letter,
	        CASE    
	            WHEN position('four' in data) = 0 
	            THEN NULL
	            ELSE position('four' in data)
	        END AS index_4_least_letter,
	        CASE    
	            WHEN position('five' in data) = 0 
	            THEN NULL
	            ELSE position('five' in data)
	        END AS index_5_least_letter,
	        CASE    
	            WHEN position('six' in data) = 0 
	            THEN NULL
	            ELSE position('six' in data)
	        END AS index_6_least_letter,
	        CASE    
	            WHEN position('seven' in data) = 0 
	            THEN NULL
	            ELSE position('seven' in data)
	        END AS index_7_least_letter,
	        CASE    
	            WHEN position('eight' in data) = 0 
	            THEN NULL
	            ELSE position('eight' in data)
	        END AS index_8_least_letter,
	        CASE    
	            WHEN position('nine' in data) = 0 
	            THEN NULL
	            ELSE position('nine' in data)
	        END AS index_9_least_letter,
	        
	        
	        CASE    
	            WHEN position('1' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('1' in REVERSE(data))
	        END AS index_1_greater_number,
	        CASE    
	            WHEN position('2' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('2' in REVERSE(data))
	        END AS index_2_greater_number,
	        CASE    
	            WHEN position('3' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('3' in REVERSE(data))
	        END AS index_3_greater_number,
	        CASE    
	            WHEN position('4' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('4' in REVERSE(data))
	        END AS index_4_greater_number,
	        CASE    
	            WHEN position('5' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('5' in REVERSE(data))
	        END AS index_5_greater_number,
	        CASE    
	            WHEN position('6' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('6' in REVERSE(data))
	        END AS index_6_greater_number,
	        CASE    
	            WHEN position('7' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('7' in REVERSE(data))
	        END AS index_7_greater_number,
	        CASE    
	            WHEN position('8' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('8' in REVERSE(data))
	        END AS index_8_greater_number,
	        CASE    
	            WHEN position('9' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('9' in REVERSE(data))
	        END AS index_9_greater_number,
	        
	        CASE    
	            WHEN position('one' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('one' in REVERSE(data))
	        END AS index_1_greater_letter,
	        CASE    
	            WHEN position('two' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('two' in REVERSE(data))
	        END AS index_2_greater_letter,
	        CASE    
	            WHEN position('three' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('three' in REVERSE(data))
	        END AS index_3_greater_letter,
	        CASE    
	            WHEN position('four' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('four' in REVERSE(data))
	        END AS index_4_greater_letter,
	        CASE    
	            WHEN position('five' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('five' in REVERSE(data))
	        END AS index_5_greater_letter,
	        CASE    
	            WHEN position('six' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('six' in REVERSE(data))
	        END AS index_6_greater_letter,
	        CASE    
	            WHEN position('seven' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('seven' in REVERSE(data))
	        END AS index_7_greater_letter,
	        CASE    
	            WHEN position('eight' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('eight' in REVERSE(data))
	        END AS index_8_greater_letter,
	        CASE    
	            WHEN position('nine' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('nine' in REVERSE(data))
	        END AS index_9_greater_letter,
	        
	        data
	    FROM day_1
	) AS indexes;
2023-12-05 00:24:49.569 CET [27378] ERROR:  syntax error at or near "CASE" at character 2592
2023-12-05 00:24:49.569 CET [27378] STATEMENT:  SELECT
	    data,
	    substr(
	        data,
	        LEAST(
	            
	            
	            
	            
	            index_1_least,
	            LEAST(
	                index_2_least_number,
	                index_2_least_letter
	            ),
	            LEAST(
	                index_3_least_number,
	                index_3_least_letter
	            ),
	            LEAST(
	                index_4_least_number,
	                index_4_least_letter
	            ),
	            LEAST(
	                index_5_least_number,
	                index_5_least_letter
	            ),
	            LEAST(
	                index_6_least_number,
	                index_6_least_letter
	            ),
	            LEAST(
	                index_7_least_number,
	                index_7_least_letter
	            ),
	            LEAST(
	                index_8_least_number,
	                index_8_least_letter
	            ),
	            LEAST(
	                index_9_least_number,
	                index_9_least_letter
	            )
	        ),
	        1
	    )
	    ||
	    substr(
	        REVERSE(data),
	        LEAST(
	            LEAST(
	                index_1_greater_number,
	                index_1_greater_letter
	            ),
	            LEAST(
	                index_2_greater_number,
	                index_2_greater_letter
	            ),
	            LEAST(
	                index_3_greater_number,
	                index_3_greater_letter
	            ),
	            LEAST(
	                index_4_greater_number,
	                index_4_greater_letter
	            ),
	            LEAST(
	                index_5_greater_number,
	                index_5_greater_letter
	            ),
	            LEAST(
	                index_6_greater_number,
	                index_6_greater_letter
	            ),
	            LEAST(
	                index_7_greater_number,
	                index_7_greater_letter
	            ),
	            LEAST(
	                index_8_greater_number,
	                index_8_greater_letter
	            ),
	            LEAST(
	                index_9_greater_number,
	                index_9_greater_letter
	            )
	        ),
	        1
	    ) AS answer
	FROM (
	    SELECT
	        
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in data) = 0 
	                THEN NULL
	                ELSE position('1' in data)
	            END, 
	            CASE    
	                WHEN position('one' in data) = 0 
	                THEN NULL
	                ELSE position('one' in data)
	            END 
	        ) AS index_1_least
	        
	        
	        
	        
	        
	        CASE    
	            WHEN position('2' in data) = 0 
	            THEN NULL
	            ELSE position('2' in data)
	        END AS index_2_least_number,
	        CASE    
	            WHEN position('3' in data) = 0 
	            THEN NULL
	            ELSE position('3' in data)
	        END AS index_3_least_number,
	        CASE    
	            WHEN position('4' in data) = 0 
	            THEN NULL
	            ELSE position('4' in data)
	        END AS index_4_least_number,
	        CASE    
	            WHEN position('5' in data) = 0 
	            THEN NULL
	            ELSE position('5' in data)
	        END AS index_5_least_number,
	        CASE    
	            WHEN position('6' in data) = 0 
	            THEN NULL
	            ELSE position('6' in data)
	        END AS index_6_least_number,
	        CASE    
	            WHEN position('7' in data) = 0 
	            THEN NULL
	            ELSE position('7' in data)
	        END AS index_7_least_number,
	        CASE    
	            WHEN position('8' in data) = 0 
	            THEN NULL
	            ELSE position('8' in data)
	        END AS index_8_least_number,
	        CASE    
	            WHEN position('9' in data) = 0 
	            THEN NULL
	            ELSE position('9' in data)
	        END AS index_9_least_number,
	        
	        
	        
	        
	        
	        
	        CASE    
	            WHEN position('two' in data) = 0 
	            THEN NULL
	            ELSE position('two' in data)
	        END AS index_2_least_letter,
	        CASE    
	            WHEN position('three' in data) = 0 
	            THEN NULL
	            ELSE position('three' in data)
	        END AS index_3_least_letter,
	        CASE    
	            WHEN position('four' in data) = 0 
	            THEN NULL
	            ELSE position('four' in data)
	        END AS index_4_least_letter,
	        CASE    
	            WHEN position('five' in data) = 0 
	            THEN NULL
	            ELSE position('five' in data)
	        END AS index_5_least_letter,
	        CASE    
	            WHEN position('six' in data) = 0 
	            THEN NULL
	            ELSE position('six' in data)
	        END AS index_6_least_letter,
	        CASE    
	            WHEN position('seven' in data) = 0 
	            THEN NULL
	            ELSE position('seven' in data)
	        END AS index_7_least_letter,
	        CASE    
	            WHEN position('eight' in data) = 0 
	            THEN NULL
	            ELSE position('eight' in data)
	        END AS index_8_least_letter,
	        CASE    
	            WHEN position('nine' in data) = 0 
	            THEN NULL
	            ELSE position('nine' in data)
	        END AS index_9_least_letter,
	        
	        
	        CASE    
	            WHEN position('1' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('1' in REVERSE(data))
	        END AS index_1_greater_number,
	        CASE    
	            WHEN position('2' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('2' in REVERSE(data))
	        END AS index_2_greater_number,
	        CASE    
	            WHEN position('3' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('3' in REVERSE(data))
	        END AS index_3_greater_number,
	        CASE    
	            WHEN position('4' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('4' in REVERSE(data))
	        END AS index_4_greater_number,
	        CASE    
	            WHEN position('5' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('5' in REVERSE(data))
	        END AS index_5_greater_number,
	        CASE    
	            WHEN position('6' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('6' in REVERSE(data))
	        END AS index_6_greater_number,
	        CASE    
	            WHEN position('7' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('7' in REVERSE(data))
	        END AS index_7_greater_number,
	        CASE    
	            WHEN position('8' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('8' in REVERSE(data))
	        END AS index_8_greater_number,
	        CASE    
	            WHEN position('9' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('9' in REVERSE(data))
	        END AS index_9_greater_number,
	        
	        CASE    
	            WHEN position('one' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('one' in REVERSE(data))
	        END AS index_1_greater_letter,
	        CASE    
	            WHEN position('two' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('two' in REVERSE(data))
	        END AS index_2_greater_letter,
	        CASE    
	            WHEN position('three' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('three' in REVERSE(data))
	        END AS index_3_greater_letter,
	        CASE    
	            WHEN position('four' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('four' in REVERSE(data))
	        END AS index_4_greater_letter,
	        CASE    
	            WHEN position('five' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('five' in REVERSE(data))
	        END AS index_5_greater_letter,
	        CASE    
	            WHEN position('six' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('six' in REVERSE(data))
	        END AS index_6_greater_letter,
	        CASE    
	            WHEN position('seven' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('seven' in REVERSE(data))
	        END AS index_7_greater_letter,
	        CASE    
	            WHEN position('eight' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('eight' in REVERSE(data))
	        END AS index_8_greater_letter,
	        CASE    
	            WHEN position('nine' in REVERSE(data)) = 0 
	            THEN NULL
	            ELSE position('nine' in REVERSE(data))
	        END AS index_9_greater_letter,
	        
	        data
	    FROM day_1
	) AS indexes;
2023-12-05 00:39:22.553 CET [27666] ERROR:  syntax error at or near "index_5_least" at character 178
2023-12-05 00:39:22.553 CET [27666] STATEMENT:  SELECT
	    data,
	    substr(
	        data,
	        LEAST(
	            index_1_least,
	            index_2_least,
	            index_3_least,
	            index_4_least
	            index_5_least
	            index_6_least,
	            index_7_least,
	            index_8_least,
	            index_9_least,
	        ),
	        1
	    )
	    ||
	    substr(
	        REVERSE(data),
	        LEAST(
	            index_1_greater,
	            index_2_greater,
	            index_3_greater
	            index_4_greater
	            index_5_greater
	            index_6_greater
	            index_7_greater
	            index_8_greater
	            index_9_greater
	        ),
	        1
	    ) AS answer
	FROM (
	    SELECT
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in data) = 0 
	                THEN NULL
	                ELSE position('1' in data)
	            END,
	            CASE    
	                WHEN position('one' in data) = 0 
	                THEN NULL
	                ELSE position('one' in data)
	            END
	        ) AS index_1_least,
	        LEAST(
	            CASE    
	                WHEN position('2' in data) = 0 
	                THEN NULL
	                ELSE position('2' in data)
	            END,
	            CASE    
	                WHEN position('two' in data) = 0 
	                THEN NULL
	                ELSE position('two' in data)
	            END
	        ) AS index_2_least,
	        LEAST(
	            CASE    
	                WHEN position('3' in data) = 0 
	                THEN NULL
	                ELSE position('3' in data)
	            END,
	            CASE    
	                WHEN position('three' in data) = 0 
	                THEN NULL
	                ELSE position('three' in data)
	            END
	        ) AS index_3_least,
	        LEAST(
	            CASE    
	                WHEN position('4' in data) = 0 
	                THEN NULL
	                ELSE position('4' in data)
	            END,
	            CASE    
	                WHEN position('four' in data) = 0 
	                THEN NULL
	                ELSE position('four' in data)
	            END
	        ) AS index_4_least,
	        LEAST(
	            CASE    
	                WHEN position('5' in data) = 0 
	                THEN NULL
	                ELSE position('5' in data)
	            END,
	            CASE    
	                WHEN position('five' in data) = 0 
	                THEN NULL
	                ELSE position('five' in data)
	            END
	        ) AS index_5_least,
	        LEAST(
	            CASE    
	                WHEN position('6' in data) = 0 
	                THEN NULL
	                ELSE position('6' in data)
	            END,
	            CASE    
	                WHEN position('six' in data) = 0 
	                THEN NULL
	                ELSE position('six' in data)
	            END
	        ) AS index_6_least,
	        LEAST(
	            CASE    
	                WHEN position('7' in data) = 0 
	                THEN NULL
	                ELSE position('7' in data)
	            END,
	            CASE    
	                WHEN position('seven' in data) = 0 
	                THEN NULL
	                ELSE position('seven' in data)
	            END
	        ) AS index_7_least,
	        LEAST(
	            CASE    
	                WHEN position('8' in data) = 0 
	                THEN NULL
	                ELSE position('8' in data)
	            END
	            CASE    
	                WHEN position('eight' in data) = 0 
	                THEN NULL
	                ELSE position('eight' in data)
	            END
	        ) AS index_8_least,
	        LEAST(
	            CASE    
	                WHEN position('9' in data) = 0 
	                THEN NULL
	                ELSE position('9' in data)
	            END,
	            CASE    
	                WHEN position('nine' in data) = 0 
	                THEN NULL
	                ELSE position('nine' in data)
	            END
	        ) AS index_9_least,
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('1' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('one' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('one' in REVERSE(data))
	            END
	        ) AS index_1_greater,
	        LEAST(
	            CASE    
	                WHEN position('2' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('2' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('two' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('two' in REVERSE(data))
	            END
	        ) AS index_2_greater,
	        LEAST(
	            CASE    
	                WHEN position('3' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('3' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('three' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('three' in REVERSE(data))
	            END
	        ) AS index_3_greater,
	        LEAST(
	            CASE    
	                WHEN position('4' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('4' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('four' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('four' in REVERSE(data))
	            END
	        ) AS index_4_greater,
	        LEAST(
	            CASE    
	                WHEN position('5' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('5' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('five' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('five' in REVERSE(data))
	            END
	        ) AS index_5_greater,
	        LEAST(
	            CASE    
	                WHEN position('6' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('6' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('six' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('six' in REVERSE(data))
	            END
	        ) AS index_6_greater,
	        LEAST(
	            CASE    
	                WHEN position('7' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('7' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('seven' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('seven' in REVERSE(data))
	            END
	        ) AS index_7_greater,
	        LEAST(
	            CASE    
	                WHEN position('8' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('8' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('eight' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('eight' in REVERSE(data))
	            END
	        ) AS index_8_greater,
	        LEAST(
	            CASE    
	                WHEN position('9' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('9' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('nine' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('nine' in REVERSE(data))
	            END
	        ) AS index_9_greater,
	        
	        data
	    FROM day_1
	) AS indexes;
2023-12-05 00:39:42.819 CET [27706] ERROR:  syntax error at or near "CASE" at character 3394
2023-12-05 00:39:42.819 CET [27706] STATEMENT:  SELECT
	    data,
	    substr(
	        data,
	        LEAST(
	            index_1_least,
	            index_2_least,
	            index_3_least,
	            index_4_least,
	            index_5_least,
	            index_6_least,
	            index_7_least,
	            index_8_least,
	            index_9_least
	        ),
	        1
	    )
	    ||
	    substr(
	        REVERSE(data),
	        LEAST(
	            index_1_greater,
	            index_2_greater,
	            index_3_greater,
	            index_4_greater,
	            index_5_greater,
	            index_6_greater,
	            index_7_greater,
	            index_8_greater,
	            index_9_greater
	        ),
	        1
	    ) AS answer
	FROM (
	    SELECT
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in data) = 0 
	                THEN NULL
	                ELSE position('1' in data)
	            END,
	            CASE    
	                WHEN position('one' in data) = 0 
	                THEN NULL
	                ELSE position('one' in data)
	            END
	        ) AS index_1_least,
	        LEAST(
	            CASE    
	                WHEN position('2' in data) = 0 
	                THEN NULL
	                ELSE position('2' in data)
	            END,
	            CASE    
	                WHEN position('two' in data) = 0 
	                THEN NULL
	                ELSE position('two' in data)
	            END
	        ) AS index_2_least,
	        LEAST(
	            CASE    
	                WHEN position('3' in data) = 0 
	                THEN NULL
	                ELSE position('3' in data)
	            END,
	            CASE    
	                WHEN position('three' in data) = 0 
	                THEN NULL
	                ELSE position('three' in data)
	            END
	        ) AS index_3_least,
	        LEAST(
	            CASE    
	                WHEN position('4' in data) = 0 
	                THEN NULL
	                ELSE position('4' in data)
	            END,
	            CASE    
	                WHEN position('four' in data) = 0 
	                THEN NULL
	                ELSE position('four' in data)
	            END
	        ) AS index_4_least,
	        LEAST(
	            CASE    
	                WHEN position('5' in data) = 0 
	                THEN NULL
	                ELSE position('5' in data)
	            END,
	            CASE    
	                WHEN position('five' in data) = 0 
	                THEN NULL
	                ELSE position('five' in data)
	            END
	        ) AS index_5_least,
	        LEAST(
	            CASE    
	                WHEN position('6' in data) = 0 
	                THEN NULL
	                ELSE position('6' in data)
	            END,
	            CASE    
	                WHEN position('six' in data) = 0 
	                THEN NULL
	                ELSE position('six' in data)
	            END
	        ) AS index_6_least,
	        LEAST(
	            CASE    
	                WHEN position('7' in data) = 0 
	                THEN NULL
	                ELSE position('7' in data)
	            END,
	            CASE    
	                WHEN position('seven' in data) = 0 
	                THEN NULL
	                ELSE position('seven' in data)
	            END
	        ) AS index_7_least,
	        LEAST(
	            CASE    
	                WHEN position('8' in data) = 0 
	                THEN NULL
	                ELSE position('8' in data)
	            END
	            CASE    
	                WHEN position('eight' in data) = 0 
	                THEN NULL
	                ELSE position('eight' in data)
	            END
	        ) AS index_8_least,
	        LEAST(
	            CASE    
	                WHEN position('9' in data) = 0 
	                THEN NULL
	                ELSE position('9' in data)
	            END,
	            CASE    
	                WHEN position('nine' in data) = 0 
	                THEN NULL
	                ELSE position('nine' in data)
	            END
	        ) AS index_9_least,
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('1' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('one' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('one' in REVERSE(data))
	            END
	        ) AS index_1_greater,
	        LEAST(
	            CASE    
	                WHEN position('2' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('2' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('two' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('two' in REVERSE(data))
	            END
	        ) AS index_2_greater,
	        LEAST(
	            CASE    
	                WHEN position('3' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('3' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('three' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('three' in REVERSE(data))
	            END
	        ) AS index_3_greater,
	        LEAST(
	            CASE    
	                WHEN position('4' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('4' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('four' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('four' in REVERSE(data))
	            END
	        ) AS index_4_greater,
	        LEAST(
	            CASE    
	                WHEN position('5' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('5' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('five' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('five' in REVERSE(data))
	            END
	        ) AS index_5_greater,
	        LEAST(
	            CASE    
	                WHEN position('6' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('6' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('six' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('six' in REVERSE(data))
	            END
	        ) AS index_6_greater,
	        LEAST(
	            CASE    
	                WHEN position('7' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('7' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('seven' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('seven' in REVERSE(data))
	            END
	        ) AS index_7_greater,
	        LEAST(
	            CASE    
	                WHEN position('8' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('8' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('eight' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('eight' in REVERSE(data))
	            END
	        ) AS index_8_greater,
	        LEAST(
	            CASE    
	                WHEN position('9' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('9' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('nine' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('nine' in REVERSE(data))
	            END
	        ) AS index_9_greater,
	        
	        data
	    FROM day_1
	) AS indexes;
2023-12-05 00:41:45.311 CET [27806] ERROR:  syntax error at or near "(" at character 1060
2023-12-05 00:41:45.311 CET [27806] STATEMENT:  SELECT
	    data,
	    substr(
	        data,
	        LEAST(
	            index_1_least,
	            index_2_least,
	            index_3_least,
	            index_4_least,
	            index_5_least,
	            index_6_least,
	            index_7_least,
	            index_8_least,
	            index_9_least
	        ),
	        1
	    )
	    ||
	    substr(
	        REVERSE(data),
	        LEAST(
	            index_1_greater,
	            index_2_greater,
	            index_3_greater,
	            index_4_greater,
	            index_5_greater,
	            index_6_greater,
	            index_7_greater,
	            index_8_greater,
	            index_9_greater
	        ),
	        1
	    ) AS answer
	FROM (
	    SELECT
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in data) = 0 
	                THEN NULL
	                ELSE (position('1' in data), 1)
	            END,
	            CASE    
	                WHEN position('one' in data) = 0 
	                THEN NULL
	                ELSE (position('one' in data), 3)
	            END
	        ) AS (index_1_least, size_index_1),
	        LEAST(
	            CASE    
	                WHEN position('2' in data) = 0 
	                THEN NULL
	                ELSE position('2' in data)
	            END,
	            CASE    
	                WHEN position('two' in data) = 0 
	                THEN NULL
	                ELSE position('two' in data)
	            END
	        ) AS index_2_least,
	        LEAST(
	            CASE    
	                WHEN position('3' in data) = 0 
	                THEN NULL
	                ELSE position('3' in data)
	            END,
	            CASE    
	                WHEN position('three' in data) = 0 
	                THEN NULL
	                ELSE position('three' in data)
	            END
	        ) AS index_3_least,
	        LEAST(
	            CASE    
	                WHEN position('4' in data) = 0 
	                THEN NULL
	                ELSE position('4' in data)
	            END,
	            CASE    
	                WHEN position('four' in data) = 0 
	                THEN NULL
	                ELSE position('four' in data)
	            END
	        ) AS index_4_least,
	        LEAST(
	            CASE    
	                WHEN position('5' in data) = 0 
	                THEN NULL
	                ELSE position('5' in data)
	            END,
	            CASE    
	                WHEN position('five' in data) = 0 
	                THEN NULL
	                ELSE position('five' in data)
	            END
	        ) AS index_5_least,
	        LEAST(
	            CASE    
	                WHEN position('6' in data) = 0 
	                THEN NULL
	                ELSE position('6' in data)
	            END,
	            CASE    
	                WHEN position('six' in data) = 0 
	                THEN NULL
	                ELSE position('six' in data)
	            END
	        ) AS index_6_least,
	        LEAST(
	            CASE    
	                WHEN position('7' in data) = 0 
	                THEN NULL
	                ELSE position('7' in data)
	            END,
	            CASE    
	                WHEN position('seven' in data) = 0 
	                THEN NULL
	                ELSE position('seven' in data)
	            END
	        ) AS index_7_least,
	        LEAST(
	            CASE    
	                WHEN position('8' in data) = 0 
	                THEN NULL
	                ELSE position('8' in data)
	            END,
	            CASE    
	                WHEN position('eight' in data) = 0 
	                THEN NULL
	                ELSE position('eight' in data)
	            END
	        ) AS index_8_least,
	        LEAST(
	            CASE    
	                WHEN position('9' in data) = 0 
	                THEN NULL
	                ELSE position('9' in data)
	            END,
	            CASE    
	                WHEN position('nine' in data) = 0 
	                THEN NULL
	                ELSE position('nine' in data)
	            END
	        ) AS index_9_least,
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('1' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('one' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('one' in REVERSE(data))
	            END
	        ) AS index_1_greater,
	        LEAST(
	            CASE    
	                WHEN position('2' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('2' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('two' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('two' in REVERSE(data))
	            END
	        ) AS index_2_greater,
	        LEAST(
	            CASE    
	                WHEN position('3' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('3' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('three' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('three' in REVERSE(data))
	            END
	        ) AS index_3_greater,
	        LEAST(
	            CASE    
	                WHEN position('4' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('4' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('four' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('four' in REVERSE(data))
	            END
	        ) AS index_4_greater,
	        LEAST(
	            CASE    
	                WHEN position('5' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('5' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('five' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('five' in REVERSE(data))
	            END
	        ) AS index_5_greater,
	        LEAST(
	            CASE    
	                WHEN position('6' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('6' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('six' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('six' in REVERSE(data))
	            END
	        ) AS index_6_greater,
	        LEAST(
	            CASE    
	                WHEN position('7' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('7' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('seven' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('seven' in REVERSE(data))
	            END
	        ) AS index_7_greater,
	        LEAST(
	            CASE    
	                WHEN position('8' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('8' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('eight' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('eight' in REVERSE(data))
	            END
	        ) AS index_8_greater,
	        LEAST(
	            CASE    
	                WHEN position('9' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('9' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('nine' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('nine' in REVERSE(data))
	            END
	        ) AS index_9_greater,
	        
	        data
	    FROM day_1
	) AS indexes;
2023-12-05 00:43:05.334 CET [27872] ERROR:  LEAST types record and integer cannot be matched at character 98
2023-12-05 00:43:05.334 CET [27872] STATEMENT:  SELECT
	    data,
	    substr(
	        data,
	        LEAST(
	            index_1_least,
	            index_2_least,
	            index_3_least,
	            index_4_least,
	            index_5_least,
	            index_6_least,
	            index_7_least,
	            index_8_least,
	            index_9_least
	        ),
	        1
	    )
	    ||
	    substr(
	        REVERSE(data),
	        LEAST(
	            index_1_greater,
	            index_2_greater,
	            index_3_greater,
	            index_4_greater,
	            index_5_greater,
	            index_6_greater,
	            index_7_greater,
	            index_8_greater,
	            index_9_greater
	        ),
	        1
	    ) AS answer
	FROM (
	    SELECT
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in data) = 0 
	                THEN NULL
	                ELSE (position('1' in data), 1)
	            END,
	            CASE    
	                WHEN position('one' in data) = 0 
	                THEN NULL
	                ELSE (position('one' in data), 3)
	            END
	        ) AS index_1_least,
	        LEAST(
	            CASE    
	                WHEN position('2' in data) = 0 
	                THEN NULL
	                ELSE position('2' in data)
	            END,
	            CASE    
	                WHEN position('two' in data) = 0 
	                THEN NULL
	                ELSE position('two' in data)
	            END
	        ) AS index_2_least,
	        LEAST(
	            CASE    
	                WHEN position('3' in data) = 0 
	                THEN NULL
	                ELSE position('3' in data)
	            END,
	            CASE    
	                WHEN position('three' in data) = 0 
	                THEN NULL
	                ELSE position('three' in data)
	            END
	        ) AS index_3_least,
	        LEAST(
	            CASE    
	                WHEN position('4' in data) = 0 
	                THEN NULL
	                ELSE position('4' in data)
	            END,
	            CASE    
	                WHEN position('four' in data) = 0 
	                THEN NULL
	                ELSE position('four' in data)
	            END
	        ) AS index_4_least,
	        LEAST(
	            CASE    
	                WHEN position('5' in data) = 0 
	                THEN NULL
	                ELSE position('5' in data)
	            END,
	            CASE    
	                WHEN position('five' in data) = 0 
	                THEN NULL
	                ELSE position('five' in data)
	            END
	        ) AS index_5_least,
	        LEAST(
	            CASE    
	                WHEN position('6' in data) = 0 
	                THEN NULL
	                ELSE position('6' in data)
	            END,
	            CASE    
	                WHEN position('six' in data) = 0 
	                THEN NULL
	                ELSE position('six' in data)
	            END
	        ) AS index_6_least,
	        LEAST(
	            CASE    
	                WHEN position('7' in data) = 0 
	                THEN NULL
	                ELSE position('7' in data)
	            END,
	            CASE    
	                WHEN position('seven' in data) = 0 
	                THEN NULL
	                ELSE position('seven' in data)
	            END
	        ) AS index_7_least,
	        LEAST(
	            CASE    
	                WHEN position('8' in data) = 0 
	                THEN NULL
	                ELSE position('8' in data)
	            END,
	            CASE    
	                WHEN position('eight' in data) = 0 
	                THEN NULL
	                ELSE position('eight' in data)
	            END
	        ) AS index_8_least,
	        LEAST(
	            CASE    
	                WHEN position('9' in data) = 0 
	                THEN NULL
	                ELSE position('9' in data)
	            END,
	            CASE    
	                WHEN position('nine' in data) = 0 
	                THEN NULL
	                ELSE position('nine' in data)
	            END
	        ) AS index_9_least,
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('1' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('one' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('one' in REVERSE(data))
	            END
	        ) AS index_1_greater,
	        LEAST(
	            CASE    
	                WHEN position('2' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('2' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('two' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('two' in REVERSE(data))
	            END
	        ) AS index_2_greater,
	        LEAST(
	            CASE    
	                WHEN position('3' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('3' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('three' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('three' in REVERSE(data))
	            END
	        ) AS index_3_greater,
	        LEAST(
	            CASE    
	                WHEN position('4' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('4' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('four' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('four' in REVERSE(data))
	            END
	        ) AS index_4_greater,
	        LEAST(
	            CASE    
	                WHEN position('5' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('5' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('five' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('five' in REVERSE(data))
	            END
	        ) AS index_5_greater,
	        LEAST(
	            CASE    
	                WHEN position('6' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('6' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('six' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('six' in REVERSE(data))
	            END
	        ) AS index_6_greater,
	        LEAST(
	            CASE    
	                WHEN position('7' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('7' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('seven' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('seven' in REVERSE(data))
	            END
	        ) AS index_7_greater,
	        LEAST(
	            CASE    
	                WHEN position('8' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('8' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('eight' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('eight' in REVERSE(data))
	            END
	        ) AS index_8_greater,
	        LEAST(
	            CASE    
	                WHEN position('9' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('9' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('nine' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('nine' in REVERSE(data))
	            END
	        ) AS index_9_greater,
	        
	        data
	    FROM day_1
	) AS indexes;
2023-12-05 00:43:30.995 CET [27907] ERROR:  cannot subscript type record because it does not support subscripting at character 71
2023-12-05 00:43:30.995 CET [27907] STATEMENT:  SELECT
	    data,
	    substr(
	        data,
	        LEAST(
	            index_1_least[0],
	            index_2_least,
	            index_3_least,
	            index_4_least,
	            index_5_least,
	            index_6_least,
	            index_7_least,
	            index_8_least,
	            index_9_least
	        ),
	        1
	    )
	    ||
	    substr(
	        REVERSE(data),
	        LEAST(
	            index_1_greater,
	            index_2_greater,
	            index_3_greater,
	            index_4_greater,
	            index_5_greater,
	            index_6_greater,
	            index_7_greater,
	            index_8_greater,
	            index_9_greater
	        ),
	        1
	    ) AS answer
	FROM (
	    SELECT
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in data) = 0 
	                THEN NULL
	                ELSE (position('1' in data), 1)
	            END,
	            CASE    
	                WHEN position('one' in data) = 0 
	                THEN NULL
	                ELSE (position('one' in data), 3)
	            END
	        ) AS index_1_least,
	        LEAST(
	            CASE    
	                WHEN position('2' in data) = 0 
	                THEN NULL
	                ELSE position('2' in data)
	            END,
	            CASE    
	                WHEN position('two' in data) = 0 
	                THEN NULL
	                ELSE position('two' in data)
	            END
	        ) AS index_2_least,
	        LEAST(
	            CASE    
	                WHEN position('3' in data) = 0 
	                THEN NULL
	                ELSE position('3' in data)
	            END,
	            CASE    
	                WHEN position('three' in data) = 0 
	                THEN NULL
	                ELSE position('three' in data)
	            END
	        ) AS index_3_least,
	        LEAST(
	            CASE    
	                WHEN position('4' in data) = 0 
	                THEN NULL
	                ELSE position('4' in data)
	            END,
	            CASE    
	                WHEN position('four' in data) = 0 
	                THEN NULL
	                ELSE position('four' in data)
	            END
	        ) AS index_4_least,
	        LEAST(
	            CASE    
	                WHEN position('5' in data) = 0 
	                THEN NULL
	                ELSE position('5' in data)
	            END,
	            CASE    
	                WHEN position('five' in data) = 0 
	                THEN NULL
	                ELSE position('five' in data)
	            END
	        ) AS index_5_least,
	        LEAST(
	            CASE    
	                WHEN position('6' in data) = 0 
	                THEN NULL
	                ELSE position('6' in data)
	            END,
	            CASE    
	                WHEN position('six' in data) = 0 
	                THEN NULL
	                ELSE position('six' in data)
	            END
	        ) AS index_6_least,
	        LEAST(
	            CASE    
	                WHEN position('7' in data) = 0 
	                THEN NULL
	                ELSE position('7' in data)
	            END,
	            CASE    
	                WHEN position('seven' in data) = 0 
	                THEN NULL
	                ELSE position('seven' in data)
	            END
	        ) AS index_7_least,
	        LEAST(
	            CASE    
	                WHEN position('8' in data) = 0 
	                THEN NULL
	                ELSE position('8' in data)
	            END,
	            CASE    
	                WHEN position('eight' in data) = 0 
	                THEN NULL
	                ELSE position('eight' in data)
	            END
	        ) AS index_8_least,
	        LEAST(
	            CASE    
	                WHEN position('9' in data) = 0 
	                THEN NULL
	                ELSE position('9' in data)
	            END,
	            CASE    
	                WHEN position('nine' in data) = 0 
	                THEN NULL
	                ELSE position('nine' in data)
	            END
	        ) AS index_9_least,
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('1' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('one' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('one' in REVERSE(data))
	            END
	        ) AS index_1_greater,
	        LEAST(
	            CASE    
	                WHEN position('2' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('2' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('two' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('two' in REVERSE(data))
	            END
	        ) AS index_2_greater,
	        LEAST(
	            CASE    
	                WHEN position('3' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('3' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('three' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('three' in REVERSE(data))
	            END
	        ) AS index_3_greater,
	        LEAST(
	            CASE    
	                WHEN position('4' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('4' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('four' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('four' in REVERSE(data))
	            END
	        ) AS index_4_greater,
	        LEAST(
	            CASE    
	                WHEN position('5' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('5' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('five' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('five' in REVERSE(data))
	            END
	        ) AS index_5_greater,
	        LEAST(
	            CASE    
	                WHEN position('6' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('6' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('six' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('six' in REVERSE(data))
	            END
	        ) AS index_6_greater,
	        LEAST(
	            CASE    
	                WHEN position('7' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('7' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('seven' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('seven' in REVERSE(data))
	            END
	        ) AS index_7_greater,
	        LEAST(
	            CASE    
	                WHEN position('8' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('8' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('eight' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('eight' in REVERSE(data))
	            END
	        ) AS index_8_greater,
	        LEAST(
	            CASE    
	                WHEN position('9' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('9' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('nine' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('nine' in REVERSE(data))
	            END
	        ) AS index_9_greater,
	        
	        data
	    FROM day_1
	) AS indexes;
2023-12-05 00:44:39.394 CET [27953] ERROR:  syntax error at or near "AS" at character 866
2023-12-05 00:44:39.394 CET [27953] STATEMENT:  SELECT
	    data,
	    substr(
	        data,
	        LEAST(
	            index_1_least[0],
	            index_2_least,
	            index_3_least,
	            index_4_least,
	            index_5_least,
	            index_6_least,
	            index_7_least,
	            index_8_least,
	            index_9_least
	        ),
	        1
	    )
	    ||
	    substr(
	        REVERSE(data),
	        LEAST(
	            index_1_greater,
	            index_2_greater,
	            index_3_greater,
	            index_4_greater,
	            index_5_greater,
	            index_6_greater,
	            index_7_greater,
	            index_8_greater,
	            index_9_greater
	        ),
	        1
	    ) AS answer
	FROM (
	    SELECT
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in data) = 0 
	                THEN NULL
	                ELSE (position('1' in data) AS index_1_least, 1 AS size_1_leasts)
	            END,
	            CASE    
	                WHEN position('one' in data) = 0 
	                THEN NULL
	                ELSE (position('1' in data) AS index_1_least, "" AS size_1_leasts)
	            END
	        ),
	        LEAST(
	            CASE    
	                WHEN position('2' in data) = 0 
	                THEN NULL
	                ELSE position('2' in data)
	            END,
	            CASE    
	                WHEN position('two' in data) = 0 
	                THEN NULL
	                ELSE position('two' in data)
	            END
	        ) AS index_2_least,
	        LEAST(
	            CASE    
	                WHEN position('3' in data) = 0 
	                THEN NULL
	                ELSE position('3' in data)
	            END,
	            CASE    
	                WHEN position('three' in data) = 0 
	                THEN NULL
	                ELSE position('three' in data)
	            END
	        ) AS index_3_least,
	        LEAST(
	            CASE    
	                WHEN position('4' in data) = 0 
	                THEN NULL
	                ELSE position('4' in data)
	            END,
	            CASE    
	                WHEN position('four' in data) = 0 
	                THEN NULL
	                ELSE position('four' in data)
	            END
	        ) AS index_4_least,
	        LEAST(
	            CASE    
	                WHEN position('5' in data) = 0 
	                THEN NULL
	                ELSE position('5' in data)
	            END,
	            CASE    
	                WHEN position('five' in data) = 0 
	                THEN NULL
	                ELSE position('five' in data)
	            END
	        ) AS index_5_least,
	        LEAST(
	            CASE    
	                WHEN position('6' in data) = 0 
	                THEN NULL
	                ELSE position('6' in data)
	            END,
	            CASE    
	                WHEN position('six' in data) = 0 
	                THEN NULL
	                ELSE position('six' in data)
	            END
	        ) AS index_6_least,
	        LEAST(
	            CASE    
	                WHEN position('7' in data) = 0 
	                THEN NULL
	                ELSE position('7' in data)
	            END,
	            CASE    
	                WHEN position('seven' in data) = 0 
	                THEN NULL
	                ELSE position('seven' in data)
	            END
	        ) AS index_7_least,
	        LEAST(
	            CASE    
	                WHEN position('8' in data) = 0 
	                THEN NULL
	                ELSE position('8' in data)
	            END,
	            CASE    
	                WHEN position('eight' in data) = 0 
	                THEN NULL
	                ELSE position('eight' in data)
	            END
	        ) AS index_8_least,
	        LEAST(
	            CASE    
	                WHEN position('9' in data) = 0 
	                THEN NULL
	                ELSE position('9' in data)
	            END,
	            CASE    
	                WHEN position('nine' in data) = 0 
	                THEN NULL
	                ELSE position('nine' in data)
	            END
	        ) AS index_9_least,
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('1' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('one' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('one' in REVERSE(data))
	            END
	        ) AS index_1_greater,
	        LEAST(
	            CASE    
	                WHEN position('2' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('2' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('two' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('two' in REVERSE(data))
	            END
	        ) AS index_2_greater,
	        LEAST(
	            CASE    
	                WHEN position('3' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('3' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('three' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('three' in REVERSE(data))
	            END
	        ) AS index_3_greater,
	        LEAST(
	            CASE    
	                WHEN position('4' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('4' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('four' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('four' in REVERSE(data))
	            END
	        ) AS index_4_greater,
	        LEAST(
	            CASE    
	                WHEN position('5' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('5' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('five' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('five' in REVERSE(data))
	            END
	        ) AS index_5_greater,
	        LEAST(
	            CASE    
	                WHEN position('6' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('6' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('six' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('six' in REVERSE(data))
	            END
	        ) AS index_6_greater,
	        LEAST(
	            CASE    
	                WHEN position('7' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('7' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('seven' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('seven' in REVERSE(data))
	            END
	        ) AS index_7_greater,
	        LEAST(
	            CASE    
	                WHEN position('8' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('8' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('eight' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('eight' in REVERSE(data))
	            END
	        ) AS index_8_greater,
	        LEAST(
	            CASE    
	                WHEN position('9' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('9' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('nine' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('nine' in REVERSE(data))
	            END
	        ) AS index_9_greater,
	        
	        data
	    FROM day_1
	) AS indexes;
2023-12-05 00:46:11.216 CET [28014] ERROR:  LEAST types record and integer cannot be matched at character 121
2023-12-05 00:46:11.216 CET [28014] STATEMENT:  SELECT
	    data,
	    substr(
	        data,
	        index_1_least,
	        LEAST(
	            index_1_least,
	            index_2_least,
	            index_3_least,
	            index_4_least,
	            index_5_least,
	            index_6_least,
	            index_7_least,
	            index_8_least,
	            index_9_least
	        ),
	        1
	    )
	    ||
	    substr(
	        REVERSE(data),
	        LEAST(
	            index_1_greater,
	            index_2_greater,
	            index_3_greater,
	            index_4_greater,
	            index_5_greater,
	            index_6_greater,
	            index_7_greater,
	            index_8_greater,
	            index_9_greater
	        ),
	        1
	    ) AS answer
	FROM (
	    SELECT
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in data) = 0 
	                THEN NULL
	                ELSE (position('1' in data), 1)
	            END,
	            CASE    
	                WHEN position('one' in data) = 0 
	                THEN NULL
	                ELSE (position('one' in data), 3)
	            END
	        ) AS index_1_least,
	        LEAST(
	            CASE    
	                WHEN position('2' in data) = 0 
	                THEN NULL
	                ELSE position('2' in data)
	            END,
	            CASE    
	                WHEN position('two' in data) = 0 
	                THEN NULL
	                ELSE position('two' in data)
	            END
	        ) AS index_2_least,
	        LEAST(
	            CASE    
	                WHEN position('3' in data) = 0 
	                THEN NULL
	                ELSE position('3' in data)
	            END,
	            CASE    
	                WHEN position('three' in data) = 0 
	                THEN NULL
	                ELSE position('three' in data)
	            END
	        ) AS index_3_least,
	        LEAST(
	            CASE    
	                WHEN position('4' in data) = 0 
	                THEN NULL
	                ELSE position('4' in data)
	            END,
	            CASE    
	                WHEN position('four' in data) = 0 
	                THEN NULL
	                ELSE position('four' in data)
	            END
	        ) AS index_4_least,
	        LEAST(
	            CASE    
	                WHEN position('5' in data) = 0 
	                THEN NULL
	                ELSE position('5' in data)
	            END,
	            CASE    
	                WHEN position('five' in data) = 0 
	                THEN NULL
	                ELSE position('five' in data)
	            END
	        ) AS index_5_least,
	        LEAST(
	            CASE    
	                WHEN position('6' in data) = 0 
	                THEN NULL
	                ELSE position('6' in data)
	            END,
	            CASE    
	                WHEN position('six' in data) = 0 
	                THEN NULL
	                ELSE position('six' in data)
	            END
	        ) AS index_6_least,
	        LEAST(
	            CASE    
	                WHEN position('7' in data) = 0 
	                THEN NULL
	                ELSE position('7' in data)
	            END,
	            CASE    
	                WHEN position('seven' in data) = 0 
	                THEN NULL
	                ELSE position('seven' in data)
	            END
	        ) AS index_7_least,
	        LEAST(
	            CASE    
	                WHEN position('8' in data) = 0 
	                THEN NULL
	                ELSE position('8' in data)
	            END,
	            CASE    
	                WHEN position('eight' in data) = 0 
	                THEN NULL
	                ELSE position('eight' in data)
	            END
	        ) AS index_8_least,
	        LEAST(
	            CASE    
	                WHEN position('9' in data) = 0 
	                THEN NULL
	                ELSE position('9' in data)
	            END,
	            CASE    
	                WHEN position('nine' in data) = 0 
	                THEN NULL
	                ELSE position('nine' in data)
	            END
	        ) AS index_9_least,
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('1' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('one' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('one' in REVERSE(data))
	            END
	        ) AS index_1_greater,
	        LEAST(
	            CASE    
	                WHEN position('2' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('2' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('two' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('two' in REVERSE(data))
	            END
	        ) AS index_2_greater,
	        LEAST(
	            CASE    
	                WHEN position('3' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('3' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('three' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('three' in REVERSE(data))
	            END
	        ) AS index_3_greater,
	        LEAST(
	            CASE    
	                WHEN position('4' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('4' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('four' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('four' in REVERSE(data))
	            END
	        ) AS index_4_greater,
	        LEAST(
	            CASE    
	                WHEN position('5' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('5' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('five' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('five' in REVERSE(data))
	            END
	        ) AS index_5_greater,
	        LEAST(
	            CASE    
	                WHEN position('6' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('6' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('six' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('six' in REVERSE(data))
	            END
	        ) AS index_6_greater,
	        LEAST(
	            CASE    
	                WHEN position('7' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('7' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('seven' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('seven' in REVERSE(data))
	            END
	        ) AS index_7_greater,
	        LEAST(
	            CASE    
	                WHEN position('8' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('8' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('eight' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('eight' in REVERSE(data))
	            END
	        ) AS index_8_greater,
	        LEAST(
	            CASE    
	                WHEN position('9' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('9' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('nine' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('nine' in REVERSE(data))
	            END
	        ) AS index_9_greater,
	        
	        data
	    FROM day_1
	) AS indexes;
2023-12-05 00:46:55.055 CET [28058] ERROR:  LEAST types record and integer cannot be matched at character 117
2023-12-05 00:46:55.055 CET [28058] STATEMENT:  SELECT
	    data,
	    index_1_least,
	    substr(
	        data,
	        LEAST(
	            index_1_least,
	            index_2_least,
	            index_3_least,
	            index_4_least,
	            index_5_least,
	            index_6_least,
	            index_7_least,
	            index_8_least,
	            index_9_least
	        ),
	        1
	    )
	    ||
	    substr(
	        REVERSE(data),
	        LEAST(
	            index_1_greater,
	            index_2_greater,
	            index_3_greater,
	            index_4_greater,
	            index_5_greater,
	            index_6_greater,
	            index_7_greater,
	            index_8_greater,
	            index_9_greater
	        ),
	        1
	    ) AS answer
	FROM (
	    SELECT
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in data) = 0 
	                THEN NULL
	                ELSE (position('1' in data), 1)
	            END,
	            CASE    
	                WHEN position('one' in data) = 0 
	                THEN NULL
	                ELSE (position('one' in data), 3)
	            END
	        ) AS index_1_least,
	        LEAST(
	            CASE    
	                WHEN position('2' in data) = 0 
	                THEN NULL
	                ELSE position('2' in data)
	            END,
	            CASE    
	                WHEN position('two' in data) = 0 
	                THEN NULL
	                ELSE position('two' in data)
	            END
	        ) AS index_2_least,
	        LEAST(
	            CASE    
	                WHEN position('3' in data) = 0 
	                THEN NULL
	                ELSE position('3' in data)
	            END,
	            CASE    
	                WHEN position('three' in data) = 0 
	                THEN NULL
	                ELSE position('three' in data)
	            END
	        ) AS index_3_least,
	        LEAST(
	            CASE    
	                WHEN position('4' in data) = 0 
	                THEN NULL
	                ELSE position('4' in data)
	            END,
	            CASE    
	                WHEN position('four' in data) = 0 
	                THEN NULL
	                ELSE position('four' in data)
	            END
	        ) AS index_4_least,
	        LEAST(
	            CASE    
	                WHEN position('5' in data) = 0 
	                THEN NULL
	                ELSE position('5' in data)
	            END,
	            CASE    
	                WHEN position('five' in data) = 0 
	                THEN NULL
	                ELSE position('five' in data)
	            END
	        ) AS index_5_least,
	        LEAST(
	            CASE    
	                WHEN position('6' in data) = 0 
	                THEN NULL
	                ELSE position('6' in data)
	            END,
	            CASE    
	                WHEN position('six' in data) = 0 
	                THEN NULL
	                ELSE position('six' in data)
	            END
	        ) AS index_6_least,
	        LEAST(
	            CASE    
	                WHEN position('7' in data) = 0 
	                THEN NULL
	                ELSE position('7' in data)
	            END,
	            CASE    
	                WHEN position('seven' in data) = 0 
	                THEN NULL
	                ELSE position('seven' in data)
	            END
	        ) AS index_7_least,
	        LEAST(
	            CASE    
	                WHEN position('8' in data) = 0 
	                THEN NULL
	                ELSE position('8' in data)
	            END,
	            CASE    
	                WHEN position('eight' in data) = 0 
	                THEN NULL
	                ELSE position('eight' in data)
	            END
	        ) AS index_8_least,
	        LEAST(
	            CASE    
	                WHEN position('9' in data) = 0 
	                THEN NULL
	                ELSE position('9' in data)
	            END,
	            CASE    
	                WHEN position('nine' in data) = 0 
	                THEN NULL
	                ELSE position('nine' in data)
	            END
	        ) AS index_9_least,
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('1' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('one' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('one' in REVERSE(data))
	            END
	        ) AS index_1_greater,
	        LEAST(
	            CASE    
	                WHEN position('2' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('2' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('two' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('two' in REVERSE(data))
	            END
	        ) AS index_2_greater,
	        LEAST(
	            CASE    
	                WHEN position('3' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('3' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('three' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('three' in REVERSE(data))
	            END
	        ) AS index_3_greater,
	        LEAST(
	            CASE    
	                WHEN position('4' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('4' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('four' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('four' in REVERSE(data))
	            END
	        ) AS index_4_greater,
	        LEAST(
	            CASE    
	                WHEN position('5' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('5' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('five' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('five' in REVERSE(data))
	            END
	        ) AS index_5_greater,
	        LEAST(
	            CASE    
	                WHEN position('6' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('6' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('six' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('six' in REVERSE(data))
	            END
	        ) AS index_6_greater,
	        LEAST(
	            CASE    
	                WHEN position('7' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('7' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('seven' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('seven' in REVERSE(data))
	            END
	        ) AS index_7_greater,
	        LEAST(
	            CASE    
	                WHEN position('8' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('8' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('eight' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('eight' in REVERSE(data))
	            END
	        ) AS index_8_greater,
	        LEAST(
	            CASE    
	                WHEN position('9' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('9' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('nine' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('nine' in REVERSE(data))
	            END
	        ) AS index_9_greater,
	        
	        data
	    FROM day_1
	) AS indexes;
2023-12-05 00:47:01.943 CET [28097] ERROR:  syntax error at or near "FROM" at character 192
2023-12-05 00:47:01.943 CET [28097] STATEMENT:  SELECT
	    data,
	    index_1_least,
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	FROM (
	    SELECT
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in data) = 0 
	                THEN NULL
	                ELSE (position('1' in data), 1)
	            END,
	            CASE    
	                WHEN position('one' in data) = 0 
	                THEN NULL
	                ELSE (position('one' in data), 3)
	            END
	        ) AS index_1_least,
	        LEAST(
	            CASE    
	                WHEN position('2' in data) = 0 
	                THEN NULL
	                ELSE position('2' in data)
	            END,
	            CASE    
	                WHEN position('two' in data) = 0 
	                THEN NULL
	                ELSE position('two' in data)
	            END
	        ) AS index_2_least,
	        LEAST(
	            CASE    
	                WHEN position('3' in data) = 0 
	                THEN NULL
	                ELSE position('3' in data)
	            END,
	            CASE    
	                WHEN position('three' in data) = 0 
	                THEN NULL
	                ELSE position('three' in data)
	            END
	        ) AS index_3_least,
	        LEAST(
	            CASE    
	                WHEN position('4' in data) = 0 
	                THEN NULL
	                ELSE position('4' in data)
	            END,
	            CASE    
	                WHEN position('four' in data) = 0 
	                THEN NULL
	                ELSE position('four' in data)
	            END
	        ) AS index_4_least,
	        LEAST(
	            CASE    
	                WHEN position('5' in data) = 0 
	                THEN NULL
	                ELSE position('5' in data)
	            END,
	            CASE    
	                WHEN position('five' in data) = 0 
	                THEN NULL
	                ELSE position('five' in data)
	            END
	        ) AS index_5_least,
	        LEAST(
	            CASE    
	                WHEN position('6' in data) = 0 
	                THEN NULL
	                ELSE position('6' in data)
	            END,
	            CASE    
	                WHEN position('six' in data) = 0 
	                THEN NULL
	                ELSE position('six' in data)
	            END
	        ) AS index_6_least,
	        LEAST(
	            CASE    
	                WHEN position('7' in data) = 0 
	                THEN NULL
	                ELSE position('7' in data)
	            END,
	            CASE    
	                WHEN position('seven' in data) = 0 
	                THEN NULL
	                ELSE position('seven' in data)
	            END
	        ) AS index_7_least,
	        LEAST(
	            CASE    
	                WHEN position('8' in data) = 0 
	                THEN NULL
	                ELSE position('8' in data)
	            END,
	            CASE    
	                WHEN position('eight' in data) = 0 
	                THEN NULL
	                ELSE position('eight' in data)
	            END
	        ) AS index_8_least,
	        LEAST(
	            CASE    
	                WHEN position('9' in data) = 0 
	                THEN NULL
	                ELSE position('9' in data)
	            END,
	            CASE    
	                WHEN position('nine' in data) = 0 
	                THEN NULL
	                ELSE position('nine' in data)
	            END
	        ) AS index_9_least,
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('1' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('one' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('one' in REVERSE(data))
	            END
	        ) AS index_1_greater,
	        LEAST(
	            CASE    
	                WHEN position('2' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('2' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('two' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('two' in REVERSE(data))
	            END
	        ) AS index_2_greater,
	        LEAST(
	            CASE    
	                WHEN position('3' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('3' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('three' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('three' in REVERSE(data))
	            END
	        ) AS index_3_greater,
	        LEAST(
	            CASE    
	                WHEN position('4' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('4' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('four' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('four' in REVERSE(data))
	            END
	        ) AS index_4_greater,
	        LEAST(
	            CASE    
	                WHEN position('5' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('5' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('five' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('five' in REVERSE(data))
	            END
	        ) AS index_5_greater,
	        LEAST(
	            CASE    
	                WHEN position('6' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('6' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('six' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('six' in REVERSE(data))
	            END
	        ) AS index_6_greater,
	        LEAST(
	            CASE    
	                WHEN position('7' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('7' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('seven' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('seven' in REVERSE(data))
	            END
	        ) AS index_7_greater,
	        LEAST(
	            CASE    
	                WHEN position('8' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('8' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('eight' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('eight' in REVERSE(data))
	            END
	        ) AS index_8_greater,
	        LEAST(
	            CASE    
	                WHEN position('9' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('9' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('nine' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('nine' in REVERSE(data))
	            END
	        ) AS index_9_greater,
	        
	        data
	    FROM day_1
	) AS indexes;
2023-12-05 00:47:39.842 CET [28181] ERROR:  function index_1_least(integer) does not exist at character 22
2023-12-05 00:47:39.842 CET [28181] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2023-12-05 00:47:39.842 CET [28181] STATEMENT:  SELECT
	    data,
	    index_1_least(0)
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	FROM (
	    SELECT
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in data) = 0 
	                THEN NULL
	                ELSE (position('1' in data), 1)
	            END,
	            CASE    
	                WHEN position('one' in data) = 0 
	                THEN NULL
	                ELSE (position('one' in data), 3)
	            END
	        ) AS index_1_least,
	        LEAST(
	            CASE    
	                WHEN position('2' in data) = 0 
	                THEN NULL
	                ELSE position('2' in data)
	            END,
	            CASE    
	                WHEN position('two' in data) = 0 
	                THEN NULL
	                ELSE position('two' in data)
	            END
	        ) AS index_2_least,
	        LEAST(
	            CASE    
	                WHEN position('3' in data) = 0 
	                THEN NULL
	                ELSE position('3' in data)
	            END,
	            CASE    
	                WHEN position('three' in data) = 0 
	                THEN NULL
	                ELSE position('three' in data)
	            END
	        ) AS index_3_least,
	        LEAST(
	            CASE    
	                WHEN position('4' in data) = 0 
	                THEN NULL
	                ELSE position('4' in data)
	            END,
	            CASE    
	                WHEN position('four' in data) = 0 
	                THEN NULL
	                ELSE position('four' in data)
	            END
	        ) AS index_4_least,
	        LEAST(
	            CASE    
	                WHEN position('5' in data) = 0 
	                THEN NULL
	                ELSE position('5' in data)
	            END,
	            CASE    
	                WHEN position('five' in data) = 0 
	                THEN NULL
	                ELSE position('five' in data)
	            END
	        ) AS index_5_least,
	        LEAST(
	            CASE    
	                WHEN position('6' in data) = 0 
	                THEN NULL
	                ELSE position('6' in data)
	            END,
	            CASE    
	                WHEN position('six' in data) = 0 
	                THEN NULL
	                ELSE position('six' in data)
	            END
	        ) AS index_6_least,
	        LEAST(
	            CASE    
	                WHEN position('7' in data) = 0 
	                THEN NULL
	                ELSE position('7' in data)
	            END,
	            CASE    
	                WHEN position('seven' in data) = 0 
	                THEN NULL
	                ELSE position('seven' in data)
	            END
	        ) AS index_7_least,
	        LEAST(
	            CASE    
	                WHEN position('8' in data) = 0 
	                THEN NULL
	                ELSE position('8' in data)
	            END,
	            CASE    
	                WHEN position('eight' in data) = 0 
	                THEN NULL
	                ELSE position('eight' in data)
	            END
	        ) AS index_8_least,
	        LEAST(
	            CASE    
	                WHEN position('9' in data) = 0 
	                THEN NULL
	                ELSE position('9' in data)
	            END,
	            CASE    
	                WHEN position('nine' in data) = 0 
	                THEN NULL
	                ELSE position('nine' in data)
	            END
	        ) AS index_9_least,
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('1' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('one' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('one' in REVERSE(data))
	            END
	        ) AS index_1_greater,
	        LEAST(
	            CASE    
	                WHEN position('2' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('2' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('two' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('two' in REVERSE(data))
	            END
	        ) AS index_2_greater,
	        LEAST(
	            CASE    
	                WHEN position('3' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('3' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('three' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('three' in REVERSE(data))
	            END
	        ) AS index_3_greater,
	        LEAST(
	            CASE    
	                WHEN position('4' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('4' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('four' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('four' in REVERSE(data))
	            END
	        ) AS index_4_greater,
	        LEAST(
	            CASE    
	                WHEN position('5' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('5' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('five' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('five' in REVERSE(data))
	            END
	        ) AS index_5_greater,
	        LEAST(
	            CASE    
	                WHEN position('6' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('6' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('six' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('six' in REVERSE(data))
	            END
	        ) AS index_6_greater,
	        LEAST(
	            CASE    
	                WHEN position('7' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('7' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('seven' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('seven' in REVERSE(data))
	            END
	        ) AS index_7_greater,
	        LEAST(
	            CASE    
	                WHEN position('8' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('8' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('eight' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('eight' in REVERSE(data))
	            END
	        ) AS index_8_greater,
	        LEAST(
	            CASE    
	                WHEN position('9' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('9' in REVERSE(data))
	            END,
	            CASE    
	                WHEN position('nine' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE position('nine' in REVERSE(data))
	            END
	        ) AS index_9_greater,
	        
	        data
	    FROM day_1
	) AS indexes;
2023-12-05 00:54:18.807 CET [28347] ERROR:  column "index_1_l" does not exist at character 22
2023-12-05 00:54:18.807 CET [28347] STATEMENT:  SELECT
	    data,
	    index_1_l,
	    index_2_l,
	    index_3_l,
	    index_4_l,
	    index_5_l,
	    index_6_l,
	    index_7_l,
	    index_8_l,
	    index_9_l,
	    index_1_g,
	    index_2_g,
	    index_3_g,
	    index_4_g,
	    index_5_g,
	    index_6_g,
	    index_7_g,
	    index_8_g,
	    index_9_g
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	FROM (
	    SELECT
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in data) = 0 
	                THEN NULL
	                ELSE (position('1' in data), 1)
	            END,
	            CASE    
	                WHEN position('one' in data) = 0 
	                THEN NULL
	                ELSE (position('one' in data), 3)
	            END
	        ) AS index_1_least,
	        LEAST(
	            CASE    
	                WHEN position('2' in data) = 0 
	                THEN NULL
	                ELSE (position('2' in data), 1)
	            END,
	            CASE    
	                WHEN position('two' in data) = 0 
	                THEN NULL
	                ELSE (position('two' in data), 3)
	            END
	        ) AS index_2_least,
	        LEAST(
	            CASE    
	                WHEN position('3' in data) = 0 
	                THEN NULL
	                ELSE (position('3' in data), 1)
	            END,
	            CASE    
	                WHEN position('three' in data) = 0 
	                THEN NULL
	                ELSE (position('three' in data), 5)
	            END
	        ) AS index_3_least,
	        LEAST(
	            CASE    
	                WHEN position('4' in data) = 0 
	                THEN NULL
	                ELSE (position('4' in data), 1)
	            END,
	            CASE    
	                WHEN position('four' in data) = 0 
	                THEN NULL
	                ELSE (position('four' in data), 4)
	            END
	        ) AS index_4_least,
	        LEAST(
	            CASE    
	                WHEN position('5' in data) = 0 
	                THEN NULL
	                ELSE (position('5' in data), 1)
	            END,
	            CASE    
	                WHEN position('five' in data) = 0 
	                THEN NULL
	                ELSE (position('five' in data), 4)
	            END
	        ) AS index_5_least,
	        LEAST(
	            CASE    
	                WHEN position('6' in data) = 0 
	                THEN NULL
	                ELSE (position('6' in data), 1)
	            END,
	            CASE    
	                WHEN position('six' in data) = 0 
	                THEN NULL
	                ELSE (position('six' in data), 3)
	            END
	        ) AS index_6_least,
	        LEAST(
	            CASE    
	                WHEN position('7' in data) = 0 
	                THEN NULL
	                ELSE (position('7' in data), 1)
	            END,
	            CASE    
	                WHEN position('seven' in data) = 0 
	                THEN NULL
	                ELSE (position('seven' in data), 5)
	            END
	        ) AS index_7_least,
	        LEAST(
	            CASE    
	                WHEN position('8' in data) = 0 
	                THEN NULL
	                ELSE (position('8' in data), 1)
	            END,
	            CASE    
	                WHEN position('eight' in data) = 0 
	                THEN NULL
	                ELSE (position('eight' in data), 5)
	            END
	        ) AS index_8_least,
	        LEAST(
	            CASE    
	                WHEN position('9' in data) = 0 
	                THEN NULL
	                ELSE (position('9' in data), 1)
	            END,
	            CASE    
	                WHEN position('nine' in data) = 0 
	                THEN NULL
	                ELSE (position('nine' in data), 4)
	            END
	        ) AS index_9_least,
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('1' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('one' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('one' in REVERSE(data)), 3)
	            END
	        ) AS index_1_greater,
	        LEAST(
	            CASE    
	                WHEN position('2' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('2' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('two' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('two' in REVERSE(data)), 3)
	            END
	        ) AS index_2_greater,
	        LEAST(
	            CASE    
	                WHEN position('3' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('3' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('three' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('three' in REVERSE(data)), 5)
	            END
	        ) AS index_3_greater,
	        LEAST(
	            CASE    
	                WHEN position('4' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('4' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('four' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('four' in REVERSE(data)), 4)
	            END
	        ) AS index_4_greater,
	        LEAST(
	            CASE    
	                WHEN position('5' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('5' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('five' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('five' in REVERSE(data)), 4)
	            END
	        ) AS index_5_greater,
	        LEAST(
	            CASE    
	                WHEN position('6' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('6' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('six' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('six' in REVERSE(data)), 3)
	            END
	        ) AS index_6_greater,
	        LEAST(
	            CASE    
	                WHEN position('7' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('7' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('seven' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('seven' in REVERSE(data)), 5)
	            END
	        ) AS index_7_greater,
	        LEAST(
	            CASE    
	                WHEN position('8' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('8' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('eight' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('eight' in REVERSE(data)), 5)
	            END
	        ) AS index_8_greater,
	        LEAST(
	            CASE    
	                WHEN position('9' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('9' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('nine' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('nine' in REVERSE(data)), 4)
	            END
	        ) AS index_9_greater,
	        
	        data
	    FROM day_1
	) AS indexes;
2023-12-05 00:55:10.422 CET [28394] ERROR:  syntax error at or near "1" at character 39
2023-12-05 00:55:10.422 CET [28394] STATEMENT:  SELECT
	    data,
	    index_1_least AS 1_l,
	    index_2_least AS 2_l,
	    index_3_least AS 3_l,
	    index_4_least AS 4_l,
	    index_5_least AS 5_l,
	    index_6_least AS 6_l,
	    index_7_least AS 7_l,
	    index_8_least AS 8_l,
	    index_9_least AS 9_l,
	    index_1_greater AS 1_g,
	    index_2_greater AS 2_g,
	    index_3_greater AS 3_g,
	    index_4_greater AS 4_g,
	    index_5_greater AS 5_g,
	    index_6_greater AS 6_g,
	    index_7_greater AS 7_g,
	    index_8_greater AS 8_g,
	    index_9_greater AS 9_g
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	FROM (
	    SELECT
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in data) = 0 
	                THEN NULL
	                ELSE (position('1' in data), 1)
	            END,
	            CASE    
	                WHEN position('one' in data) = 0 
	                THEN NULL
	                ELSE (position('one' in data), 3)
	            END
	        ) AS index_1_least,
	        LEAST(
	            CASE    
	                WHEN position('2' in data) = 0 
	                THEN NULL
	                ELSE (position('2' in data), 1)
	            END,
	            CASE    
	                WHEN position('two' in data) = 0 
	                THEN NULL
	                ELSE (position('two' in data), 3)
	            END
	        ) AS index_2_least,
	        LEAST(
	            CASE    
	                WHEN position('3' in data) = 0 
	                THEN NULL
	                ELSE (position('3' in data), 1)
	            END,
	            CASE    
	                WHEN position('three' in data) = 0 
	                THEN NULL
	                ELSE (position('three' in data), 5)
	            END
	        ) AS index_3_least,
	        LEAST(
	            CASE    
	                WHEN position('4' in data) = 0 
	                THEN NULL
	                ELSE (position('4' in data), 1)
	            END,
	            CASE    
	                WHEN position('four' in data) = 0 
	                THEN NULL
	                ELSE (position('four' in data), 4)
	            END
	        ) AS index_4_least,
	        LEAST(
	            CASE    
	                WHEN position('5' in data) = 0 
	                THEN NULL
	                ELSE (position('5' in data), 1)
	            END,
	            CASE    
	                WHEN position('five' in data) = 0 
	                THEN NULL
	                ELSE (position('five' in data), 4)
	            END
	        ) AS index_5_least,
	        LEAST(
	            CASE    
	                WHEN position('6' in data) = 0 
	                THEN NULL
	                ELSE (position('6' in data), 1)
	            END,
	            CASE    
	                WHEN position('six' in data) = 0 
	                THEN NULL
	                ELSE (position('six' in data), 3)
	            END
	        ) AS index_6_least,
	        LEAST(
	            CASE    
	                WHEN position('7' in data) = 0 
	                THEN NULL
	                ELSE (position('7' in data), 1)
	            END,
	            CASE    
	                WHEN position('seven' in data) = 0 
	                THEN NULL
	                ELSE (position('seven' in data), 5)
	            END
	        ) AS index_7_least,
	        LEAST(
	            CASE    
	                WHEN position('8' in data) = 0 
	                THEN NULL
	                ELSE (position('8' in data), 1)
	            END,
	            CASE    
	                WHEN position('eight' in data) = 0 
	                THEN NULL
	                ELSE (position('eight' in data), 5)
	            END
	        ) AS index_8_least,
	        LEAST(
	            CASE    
	                WHEN position('9' in data) = 0 
	                THEN NULL
	                ELSE (position('9' in data), 1)
	            END,
	            CASE    
	                WHEN position('nine' in data) = 0 
	                THEN NULL
	                ELSE (position('nine' in data), 4)
	            END
	        ) AS index_9_least,
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('1' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('one' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('one' in REVERSE(data)), 3)
	            END
	        ) AS index_1_greater,
	        LEAST(
	            CASE    
	                WHEN position('2' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('2' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('two' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('two' in REVERSE(data)), 3)
	            END
	        ) AS index_2_greater,
	        LEAST(
	            CASE    
	                WHEN position('3' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('3' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('three' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('three' in REVERSE(data)), 5)
	            END
	        ) AS index_3_greater,
	        LEAST(
	            CASE    
	                WHEN position('4' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('4' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('four' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('four' in REVERSE(data)), 4)
	            END
	        ) AS index_4_greater,
	        LEAST(
	            CASE    
	                WHEN position('5' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('5' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('five' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('five' in REVERSE(data)), 4)
	            END
	        ) AS index_5_greater,
	        LEAST(
	            CASE    
	                WHEN position('6' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('6' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('six' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('six' in REVERSE(data)), 3)
	            END
	        ) AS index_6_greater,
	        LEAST(
	            CASE    
	                WHEN position('7' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('7' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('seven' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('seven' in REVERSE(data)), 5)
	            END
	        ) AS index_7_greater,
	        LEAST(
	            CASE    
	                WHEN position('8' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('8' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('eight' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('eight' in REVERSE(data)), 5)
	            END
	        ) AS index_8_greater,
	        LEAST(
	            CASE    
	                WHEN position('9' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('9' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('nine' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('nine' in REVERSE(data)), 4)
	            END
	        ) AS index_9_greater,
	        
	        data
	    FROM day_1
	) AS indexes;
2023-12-05 00:56:00.826 CET [28481] ERROR:  syntax error at or near "[" at character 852
2023-12-05 00:56:00.826 CET [28481] STATEMENT:  SELECT
	    data,
	    index_1_least AS i_1_l,
	    index_2_least AS i_2_l,
	    index_3_least AS i_3_l,
	    index_4_least AS i_4_l,
	    index_5_least AS i_5_l,
	    index_6_least AS i_6_l,
	    index_7_least AS i_7_l,
	    index_8_least AS i_8_l,
	    index_9_least AS i_9_l,
	    index_1_greater AS i_1_g,
	    index_2_greater AS i_2_g,
	    index_3_greater AS i_3_g,
	    index_4_greater AS i_4_g,
	    index_5_greater AS i_5_g,
	    index_6_greater AS i_6_g,
	    index_7_greater AS i_7_g,
	    index_8_greater AS i_8_g,
	    index_9_greater AS i_9_g
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	FROM (
	    SELECT
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in data) = 0 
	                THEN NULL
	                ELSE [position('1' in data), 1]
	            END,
	            CASE    
	                WHEN position('one' in data) = 0 
	                THEN NULL
	                ELSE (position('one' in data), 3)
	            END
	        ) AS index_1_least,
	        LEAST(
	            CASE    
	                WHEN position('2' in data) = 0 
	                THEN NULL
	                ELSE (position('2' in data), 1)
	            END,
	            CASE    
	                WHEN position('two' in data) = 0 
	                THEN NULL
	                ELSE (position('two' in data), 3)
	            END
	        ) AS index_2_least,
	        LEAST(
	            CASE    
	                WHEN position('3' in data) = 0 
	                THEN NULL
	                ELSE (position('3' in data), 1)
	            END,
	            CASE    
	                WHEN position('three' in data) = 0 
	                THEN NULL
	                ELSE (position('three' in data), 5)
	            END
	        ) AS index_3_least,
	        LEAST(
	            CASE    
	                WHEN position('4' in data) = 0 
	                THEN NULL
	                ELSE (position('4' in data), 1)
	            END,
	            CASE    
	                WHEN position('four' in data) = 0 
	                THEN NULL
	                ELSE (position('four' in data), 4)
	            END
	        ) AS index_4_least,
	        LEAST(
	            CASE    
	                WHEN position('5' in data) = 0 
	                THEN NULL
	                ELSE (position('5' in data), 1)
	            END,
	            CASE    
	                WHEN position('five' in data) = 0 
	                THEN NULL
	                ELSE (position('five' in data), 4)
	            END
	        ) AS index_5_least,
	        LEAST(
	            CASE    
	                WHEN position('6' in data) = 0 
	                THEN NULL
	                ELSE (position('6' in data), 1)
	            END,
	            CASE    
	                WHEN position('six' in data) = 0 
	                THEN NULL
	                ELSE (position('six' in data), 3)
	            END
	        ) AS index_6_least,
	        LEAST(
	            CASE    
	                WHEN position('7' in data) = 0 
	                THEN NULL
	                ELSE (position('7' in data), 1)
	            END,
	            CASE    
	                WHEN position('seven' in data) = 0 
	                THEN NULL
	                ELSE (position('seven' in data), 5)
	            END
	        ) AS index_7_least,
	        LEAST(
	            CASE    
	                WHEN position('8' in data) = 0 
	                THEN NULL
	                ELSE (position('8' in data), 1)
	            END,
	            CASE    
	                WHEN position('eight' in data) = 0 
	                THEN NULL
	                ELSE (position('eight' in data), 5)
	            END
	        ) AS index_8_least,
	        LEAST(
	            CASE    
	                WHEN position('9' in data) = 0 
	                THEN NULL
	                ELSE (position('9' in data), 1)
	            END,
	            CASE    
	                WHEN position('nine' in data) = 0 
	                THEN NULL
	                ELSE (position('nine' in data), 4)
	            END
	        ) AS index_9_least,
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('1' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('one' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('one' in REVERSE(data)), 3)
	            END
	        ) AS index_1_greater,
	        LEAST(
	            CASE    
	                WHEN position('2' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('2' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('two' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('two' in REVERSE(data)), 3)
	            END
	        ) AS index_2_greater,
	        LEAST(
	            CASE    
	                WHEN position('3' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('3' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('three' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('three' in REVERSE(data)), 5)
	            END
	        ) AS index_3_greater,
	        LEAST(
	            CASE    
	                WHEN position('4' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('4' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('four' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('four' in REVERSE(data)), 4)
	            END
	        ) AS index_4_greater,
	        LEAST(
	            CASE    
	                WHEN position('5' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('5' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('five' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('five' in REVERSE(data)), 4)
	            END
	        ) AS index_5_greater,
	        LEAST(
	            CASE    
	                WHEN position('6' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('6' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('six' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('six' in REVERSE(data)), 3)
	            END
	        ) AS index_6_greater,
	        LEAST(
	            CASE    
	                WHEN position('7' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('7' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('seven' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('seven' in REVERSE(data)), 5)
	            END
	        ) AS index_7_greater,
	        LEAST(
	            CASE    
	                WHEN position('8' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('8' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('eight' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('eight' in REVERSE(data)), 5)
	            END
	        ) AS index_8_greater,
	        LEAST(
	            CASE    
	                WHEN position('9' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('9' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('nine' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('nine' in REVERSE(data)), 4)
	            END
	        ) AS index_9_greater,
	        
	        data
	    FROM day_1
	) AS indexes;
2023-12-05 00:56:07.757 CET [28518] ERROR:  LEAST types integer[] and record cannot be matched at character 913
2023-12-05 00:56:07.757 CET [28518] STATEMENT:  SELECT
	    data,
	    index_1_least AS i_1_l,
	    index_2_least AS i_2_l,
	    index_3_least AS i_3_l,
	    index_4_least AS i_4_l,
	    index_5_least AS i_5_l,
	    index_6_least AS i_6_l,
	    index_7_least AS i_7_l,
	    index_8_least AS i_8_l,
	    index_9_least AS i_9_l,
	    index_1_greater AS i_1_g,
	    index_2_greater AS i_2_g,
	    index_3_greater AS i_3_g,
	    index_4_greater AS i_4_g,
	    index_5_greater AS i_5_g,
	    index_6_greater AS i_6_g,
	    index_7_greater AS i_7_g,
	    index_8_greater AS i_8_g,
	    index_9_greater AS i_9_g
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	FROM (
	    SELECT
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in data) = 0 
	                THEN NULL
	                ELSE ARRAY[position('1' in data), 1]
	            END,
	            CASE    
	                WHEN position('one' in data) = 0 
	                THEN NULL
	                ELSE (position('one' in data), 3)
	            END
	        ) AS index_1_least,
	        LEAST(
	            CASE    
	                WHEN position('2' in data) = 0 
	                THEN NULL
	                ELSE (position('2' in data), 1)
	            END,
	            CASE    
	                WHEN position('two' in data) = 0 
	                THEN NULL
	                ELSE (position('two' in data), 3)
	            END
	        ) AS index_2_least,
	        LEAST(
	            CASE    
	                WHEN position('3' in data) = 0 
	                THEN NULL
	                ELSE (position('3' in data), 1)
	            END,
	            CASE    
	                WHEN position('three' in data) = 0 
	                THEN NULL
	                ELSE (position('three' in data), 5)
	            END
	        ) AS index_3_least,
	        LEAST(
	            CASE    
	                WHEN position('4' in data) = 0 
	                THEN NULL
	                ELSE (position('4' in data), 1)
	            END,
	            CASE    
	                WHEN position('four' in data) = 0 
	                THEN NULL
	                ELSE (position('four' in data), 4)
	            END
	        ) AS index_4_least,
	        LEAST(
	            CASE    
	                WHEN position('5' in data) = 0 
	                THEN NULL
	                ELSE (position('5' in data), 1)
	            END,
	            CASE    
	                WHEN position('five' in data) = 0 
	                THEN NULL
	                ELSE (position('five' in data), 4)
	            END
	        ) AS index_5_least,
	        LEAST(
	            CASE    
	                WHEN position('6' in data) = 0 
	                THEN NULL
	                ELSE (position('6' in data), 1)
	            END,
	            CASE    
	                WHEN position('six' in data) = 0 
	                THEN NULL
	                ELSE (position('six' in data), 3)
	            END
	        ) AS index_6_least,
	        LEAST(
	            CASE    
	                WHEN position('7' in data) = 0 
	                THEN NULL
	                ELSE (position('7' in data), 1)
	            END,
	            CASE    
	                WHEN position('seven' in data) = 0 
	                THEN NULL
	                ELSE (position('seven' in data), 5)
	            END
	        ) AS index_7_least,
	        LEAST(
	            CASE    
	                WHEN position('8' in data) = 0 
	                THEN NULL
	                ELSE (position('8' in data), 1)
	            END,
	            CASE    
	                WHEN position('eight' in data) = 0 
	                THEN NULL
	                ELSE (position('eight' in data), 5)
	            END
	        ) AS index_8_least,
	        LEAST(
	            CASE    
	                WHEN position('9' in data) = 0 
	                THEN NULL
	                ELSE (position('9' in data), 1)
	            END,
	            CASE    
	                WHEN position('nine' in data) = 0 
	                THEN NULL
	                ELSE (position('nine' in data), 4)
	            END
	        ) AS index_9_least,
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('1' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('one' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('one' in REVERSE(data)), 3)
	            END
	        ) AS index_1_greater,
	        LEAST(
	            CASE    
	                WHEN position('2' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('2' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('two' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('two' in REVERSE(data)), 3)
	            END
	        ) AS index_2_greater,
	        LEAST(
	            CASE    
	                WHEN position('3' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('3' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('three' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('three' in REVERSE(data)), 5)
	            END
	        ) AS index_3_greater,
	        LEAST(
	            CASE    
	                WHEN position('4' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('4' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('four' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('four' in REVERSE(data)), 4)
	            END
	        ) AS index_4_greater,
	        LEAST(
	            CASE    
	                WHEN position('5' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('5' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('five' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('five' in REVERSE(data)), 4)
	            END
	        ) AS index_5_greater,
	        LEAST(
	            CASE    
	                WHEN position('6' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('6' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('six' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('six' in REVERSE(data)), 3)
	            END
	        ) AS index_6_greater,
	        LEAST(
	            CASE    
	                WHEN position('7' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('7' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('seven' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('seven' in REVERSE(data)), 5)
	            END
	        ) AS index_7_greater,
	        LEAST(
	            CASE    
	                WHEN position('8' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('8' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('eight' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('eight' in REVERSE(data)), 5)
	            END
	        ) AS index_8_greater,
	        LEAST(
	            CASE    
	                WHEN position('9' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('9' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('nine' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('nine' in REVERSE(data)), 4)
	            END
	        ) AS index_9_greater,
	        
	        data
	    FROM day_1
	) AS indexes;
2023-12-05 00:57:17.062 CET [28567] ERROR:  syntax error at or near "[" at character 1019
2023-12-05 00:57:17.062 CET [28567] STATEMENT:  SELECT
	    data,
	    index_1_least AS i_1_l,
	    index_2_least AS i_2_l,
	    index_3_least AS i_3_l,
	    index_4_least AS i_4_l,
	    index_5_least AS i_5_l,
	    index_6_least AS i_6_l,
	    index_7_least AS i_7_l,
	    index_8_least AS i_8_l,
	    index_9_least AS i_9_l,
	    index_1_greater AS i_1_g,
	    index_2_greater AS i_2_g,
	    index_3_greater AS i_3_g,
	    index_4_greater AS i_4_g,
	    index_5_greater AS i_5_g,
	    index_6_greater AS i_6_g,
	    index_7_greater AS i_7_g,
	    index_8_greater AS i_8_g,
	    index_9_greater AS i_9_g
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	FROM (
	    SELECT
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in data) = 0 
	                THEN NULL
	                ELSE ARRAY[position('1' in data), 1]
	            END,
	            CASE    
	                WHEN position('one' in data) = 0 
	                THEN NULL
	                ELSE [position('one' in data), 3]
	            END
	        ) AS index_1_least,
	        LEAST(
	            CASE    
	                WHEN position('2' in data) = 0 
	                THEN NULL
	                ELSE (position('2' in data), 1)
	            END,
	            CASE    
	                WHEN position('two' in data) = 0 
	                THEN NULL
	                ELSE (position('two' in data), 3)
	            END
	        ) AS index_2_least,
	        LEAST(
	            CASE    
	                WHEN position('3' in data) = 0 
	                THEN NULL
	                ELSE (position('3' in data), 1)
	            END,
	            CASE    
	                WHEN position('three' in data) = 0 
	                THEN NULL
	                ELSE (position('three' in data), 5)
	            END
	        ) AS index_3_least,
	        LEAST(
	            CASE    
	                WHEN position('4' in data) = 0 
	                THEN NULL
	                ELSE (position('4' in data), 1)
	            END,
	            CASE    
	                WHEN position('four' in data) = 0 
	                THEN NULL
	                ELSE (position('four' in data), 4)
	            END
	        ) AS index_4_least,
	        LEAST(
	            CASE    
	                WHEN position('5' in data) = 0 
	                THEN NULL
	                ELSE (position('5' in data), 1)
	            END,
	            CASE    
	                WHEN position('five' in data) = 0 
	                THEN NULL
	                ELSE (position('five' in data), 4)
	            END
	        ) AS index_5_least,
	        LEAST(
	            CASE    
	                WHEN position('6' in data) = 0 
	                THEN NULL
	                ELSE (position('6' in data), 1)
	            END,
	            CASE    
	                WHEN position('six' in data) = 0 
	                THEN NULL
	                ELSE (position('six' in data), 3)
	            END
	        ) AS index_6_least,
	        LEAST(
	            CASE    
	                WHEN position('7' in data) = 0 
	                THEN NULL
	                ELSE (position('7' in data), 1)
	            END,
	            CASE    
	                WHEN position('seven' in data) = 0 
	                THEN NULL
	                ELSE (position('seven' in data), 5)
	            END
	        ) AS index_7_least,
	        LEAST(
	            CASE    
	                WHEN position('8' in data) = 0 
	                THEN NULL
	                ELSE (position('8' in data), 1)
	            END,
	            CASE    
	                WHEN position('eight' in data) = 0 
	                THEN NULL
	                ELSE (position('eight' in data), 5)
	            END
	        ) AS index_8_least,
	        LEAST(
	            CASE    
	                WHEN position('9' in data) = 0 
	                THEN NULL
	                ELSE (position('9' in data), 1)
	            END,
	            CASE    
	                WHEN position('nine' in data) = 0 
	                THEN NULL
	                ELSE (position('nine' in data), 4)
	            END
	        ) AS index_9_least,
	        
	        LEAST(
	            CASE    
	                WHEN position('1' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('1' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('one' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('one' in REVERSE(data)), 3)
	            END
	        ) AS index_1_greater,
	        LEAST(
	            CASE    
	                WHEN position('2' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('2' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('two' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('two' in REVERSE(data)), 3)
	            END
	        ) AS index_2_greater,
	        LEAST(
	            CASE    
	                WHEN position('3' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('3' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('three' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('three' in REVERSE(data)), 5)
	            END
	        ) AS index_3_greater,
	        LEAST(
	            CASE    
	                WHEN position('4' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('4' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('four' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('four' in REVERSE(data)), 4)
	            END
	        ) AS index_4_greater,
	        LEAST(
	            CASE    
	                WHEN position('5' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('5' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('five' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('five' in REVERSE(data)), 4)
	            END
	        ) AS index_5_greater,
	        LEAST(
	            CASE    
	                WHEN position('6' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('6' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('six' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('six' in REVERSE(data)), 3)
	            END
	        ) AS index_6_greater,
	        LEAST(
	            CASE    
	                WHEN position('7' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('7' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('seven' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('seven' in REVERSE(data)), 5)
	            END
	        ) AS index_7_greater,
	        LEAST(
	            CASE    
	                WHEN position('8' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('8' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('eight' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('eight' in REVERSE(data)), 5)
	            END
	        ) AS index_8_greater,
	        LEAST(
	            CASE    
	                WHEN position('9' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('9' in REVERSE(data)), 1)
	            END,
	            CASE    
	                WHEN position('nine' in REVERSE(data)) = 0 
	                THEN NULL
	                ELSE (position('nine' in REVERSE(data)), 4)
	            END
	        ) AS index_9_greater,
	        
	        data
	    FROM day_1
	) AS indexes;
